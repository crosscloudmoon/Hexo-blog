<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>学会使用Less，工作效率UP|笔记|教程|</title>
    <url>/2021/06/22/Less/</url>
    <content><![CDATA[<h1 id="学会使用Less，工作效率UP-笔记-教程"><a href="#学会使用Less，工作效率UP-笔记-教程" class="headerlink" title="学会使用Less，工作效率UP|笔记|教程|"></a>学会使用Less，工作效率UP|笔记|教程|</h1><br>

<p>​    Less是一门<code>CSS预处理语言</code>,它<em>基于Node</em>,它扩展了CSS语言，增加了功能，使写CSS更加方便，结构更加清晰。</p>
<p>​    <strong>功能</strong>： 变量，嵌套，伪类，伪元素，媒体查询。</p>
<br>

<br>

<br>

<h2 id="Less里的注释"><a href="#Less里的注释" class="headerlink" title="Less里的注释"></a>Less里的注释</h2><p>以**//开头**的注释，不会被编译到CSS里</p>
<p>以**/* */包裹**的注释会被编译到CSS里</p>
<p><br><br><br><br><br></p>
<h2 id="使用Less的方式"><a href="#使用Less的方式" class="headerlink" title="使用Less的方式"></a>使用Less的方式</h2><ol>
<li><p><code>使用npm安装</code>/命令行用法</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g less</span><br></pre></td></tr></table></figure></li>
<li><p><code>引入式</code>/浏览器端用法（引入文件不符合预编辑的理念，不推荐）</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;less.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>编辑器插件</code>（<strong>推荐</strong>）</p>
<p> VScode里的 Easy LESS插件（保存Less时自动生成CSS文件）</p>
<p> <strong>注意</strong>：要在HTML里引入 自动生成的CSS文件。</p>
</li>
<li><p>在项目中使用打包工具（webpack,gulp）</p>
</li>
</ol>
<p><br><br><br><br><br></p>
<h2 id="Less功能"><a href="#Less功能" class="headerlink" title="Less功能"></a>Less功能</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 布局</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><br><br>### 1.变量</p>
<br>

<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 把常用的颜色，大小等设为变量，统一修改，我们就可以快速改变页面的主题，风格。</span></span><br><span class="line"><span class="variable">@width:</span> <span class="number">200px</span>;			</span><br><span class="line"><span class="variable">@color:</span> lightblue;</span><br><span class="line"><span class="variable">@m:</span> margin;</span><br><span class="line"><span class="variable">@selector:</span> footer;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">@width</span>; </span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="variable">@color</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">@&#123;selector&#125;</span>&#123;			<span class="comment">// 把选择器与属性设为变量时要用&#123;&#125;包裹</span></span><br><span class="line">    @&#123;m&#125;: <span class="selector-tag">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<p>作为URL: @{url}</p>
<p><strong>注意</strong>： Less里的变量均为块级作用域</p>
<p><br><br><br><br> </p>
<h4 id="Less变量的延迟加载问题"><a href="#Less变量的延迟加载问题" class="headerlink" title="Less变量的延迟加载问题"></a>Less变量的延迟加载问题</h4><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@var:</span> <span class="number">0</span>;</span><br><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">    <span class="variable">@var:</span> <span class="number">1</span>;</span><br><span class="line">    <span class="selector-class">.brass</span> &#123;</span><br><span class="line">        <span class="variable">@var:</span> <span class="number">2</span>;</span><br><span class="line">        three: @var;		<span class="comment">//3</span></span><br><span class="line">        <span class="variable">@var:</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    one: @var;				<span class="comment">// 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Less会把一个块的内容全部加载后，赋值。</code></p>
<p><br><br><br><br><br><br></p>
<h3 id="2-嵌套"><a href="#2-嵌套" class="headerlink" title="2.嵌套"></a>2.嵌套</h3><br>

<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">header</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="selector-tag">header</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>:  pink;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><br><br><br><br><br></p>
<h3 id="3-伪类"><a href="#3-伪类" class="headerlink" title="3.伪类"></a>3.伪类</h3><br>

<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">section</span>&#123;    <span class="attribute">height</span>: <span class="number">200px</span>;    <span class="attribute">width</span>: <span class="number">200px</span>;    <span class="attribute">background</span>: lightblue;    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span>&#123;				<span class="comment">// 伪元素     &amp;为父选择器（指section）        background: lightyellow;    &#125;    &amp;::before&#123;					// 伪类        content: &#x27;&#x27;;            &#125;    &amp;:nth-child(2)&#123;					// 平级        width: 50px;        height: 50px;    &#125;&#125;</span></span><br></pre></td></tr></table></figure>



<p><br><br><br><br><br></p>
<h3 id="4-媒体查询"><a href="#4-媒体查询" class="headerlink" title="4.媒体查询"></a>4.媒体查询</h3><br>

<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;    <span class="selector-tag">header</span>&#123;        <span class="attribute">color</span>: ;    &#125;    <span class="selector-tag">section</span>&#123;    <span class="attribute">height</span>: <span class="number">200px</span>;    <span class="attribute">width</span>: <span class="number">200px</span>;    <span class="attribute">background</span>: lightblue;        <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">500px</span>)&#123;            <span class="attribute">background</span>: grey;        &#125;&#125;&#125;</span><br></pre></td></tr></table></figure>

<br>

<p><br><br><br><br></p>
<h3 id="5-混合（mix-in-）"><a href="#5-混合（mix-in-）" class="headerlink" title="5.混合（mix in ）"></a>5.混合（mix in ）</h3><p>当界面的结构不再单一，我们就可能会用到<code>混合模式</code>（冗余代码抽离出来）</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不带（）就是普通的混合会被编译到CSS里.pinkthem()&#123;				// 抽离出代码，减少冗余    width: 200px;    height: 200px;    color: pink;    &#125;.container&#123;    header&#123;        .pinktheme()；			//括号一定要有，防止被css编译到代码内。    &#125;    footer&#123;        .pinktheme()；    &#125;    &#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>用法上和函数相似，但本质 不是函数。</p>
<p><br><br><br><br></p>
<h4 id="5-1带参数的混合"><a href="#5-1带参数的混合" class="headerlink" title="5.1带参数的混合"></a>5.1带参数的混合</h4><p>虽然代码冗余减少了，但有时可能不想全部应用，这种混合就少了一点灵活性，这时候就要用参数来控制 。</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.pinktheme</span>(<span class="variable">@w</span>,<span class="variable">@h</span>,<span class="variable">@c</span>)&#123;    <span class="attribute">width</span>: <span class="variable">@w</span>;    <span class="attribute">height</span>: <span class="variable">@h</span>;    <span class="attribute">color</span>: <span class="variable">@c</span>&#125;<span class="selector-class">.container</span>&#123;    <span class="selector-tag">header</span>&#123;        <span class="selector-class">.pinktheme</span>(<span class="number">200px</span>,<span class="number">300px</span>, pink)；				<span class="comment">// 传参    &#125;    footer&#123;        .pinktheme(100px, 200px, lightpink)；    &#125;    &#125;</span></span><br></pre></td></tr></table></figure>

<br>

<p>传的参数个数要求一一对应的，不可少参，但是我们可以使用默认值来避免传参，只在特别修改的地方修改参数。</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.pinktheme</span>(<span class="variable">@w</span>:<span class="number">200px</span>,<span class="variable">@h</span>:<span class="number">200px</span>,<span class="variable">@c</span>:pink)&#123;    <span class="attribute">width</span>: <span class="variable">@w</span>;    <span class="attribute">height</span>: <span class="variable">@h</span>;    <span class="attribute">color</span>: <span class="variable">@c</span>&#125;<span class="selector-class">.container</span>&#123;    <span class="selector-tag">footer</span>&#123;        <span class="selector-class">.pinktheme</span>(<span class="number">100px</span>)；		<span class="comment">// 只修改宽度，别的默认    &#125;    header&#123;        .pinktheme(@c:pink)；				// 命名参数    &#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p><br><br><br><br><br></p>
<h4 id="5-2匹配模式"><a href="#5-2匹配模式" class="headerlink" title="5.2匹配模式"></a>5.2匹配模式</h4><p>之前我们学过把代码抽离出去，到了后期抽离的代码块越来越多，就会影响我们less编写，所以我们没抽离出的代码一起放在<strong>别的less</strong>文件。</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新建的名叫themes的less文件.pinktheme(P1,@w:200px,@h:200px,@c:pink)&#123;		// P1就是模式    width: @w;    height: @h;    color: @c&#125;</span></span><br></pre></td></tr></table></figure>



<br>

<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原文件@import &quot;themes&quot;;			// import引入文件，注意有分号        .container&#123;    footer&#123;        .pinktheme(P1,100px)；				// 如果我们pinktheme有多个版本就可以选择模式    &#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>这种写法适用于多个代码块有大部分冗余，我们每次只修改一两个属性，如我们在界面上画图形每个代码块只有三个形的方向的代码不同，我们建立不同模式，再把每个模式内相同的代码再一次抽离出去，实现减少冗余 。</p>
<p>例如：我们有两个pinktheme模式但我们只是颜色上有一点 不同。</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// themes文件.wh(@w:200px,@h:200px)&#123;			// 再抽离    width: @w;    height: @h;&#125;.pinktheme(P1,@c:pink)&#123;		// P1模式	.wh();    color: @c;&#125;.pinktheme(P2,@c:lightpink&#123;		// P2模式 只有color不一样	.wh();    color: @c;&#125;// 原文件@import &quot;themes&quot;;        .container&#123;    footer&#123;        .pinktheme(P1)；	     header&#123;        .pinktheme(P2)；				    &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>如果我们不用匹配模式，用不同的代码块抽离，就会多出不少相似的代码块（.pinktheme,.lightpinktheme）。</p>
<p>在调用上还可以写成这种</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// themes文件.pinktheme(@w:200px,@h:200px)&#123;			// 使用同名    width: @w;    height: @h;&#125;.pinktheme(P1,@c:pink)&#123;		// P1模式    color: @c&#125;.pinktheme(P2,@c:lightpink&#123;		// P2模式 只有color不一样    color: @c&#125;// 原文件@import &quot;themes&quot;;        .container&#123;    footer&#123;        .pinktheme();			// 这种上面代码是减少，但要调用两个，写法随自己喜好了这个。          .pinktheme(P1)；	     header&#123;         .pinktheme();        .pinktheme(P2)；				    &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p><code>最终进阶</code>:调用两次是不是还有有个麻烦，还可以优化</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// themes文件.pinktheme(@_)&#123;			// 使用@_,每次调用时自动执行    width: 200px;    height: 200px;&#125;.pinktheme(P1,@c:pink)&#123;	    color: @c&#125;.pinktheme(P2,@c:lightpink&#123;	    color: @c&#125;// 原文件@import &quot;themes&quot;;        .container&#123;    footer&#123;		         .pinktheme(P1)；			//  只调用一次     header&#123;        .pinktheme(P2)；				    &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p><br><br><br><br><br><br></p>
<h4 id="5-3arguments变量（非重点）"><a href="#5-3arguments变量（非重点）" class="headerlink" title="5.3arguments变量（非重点）"></a>5.3arguments变量（非重点）</h4><p>它是实参变量，伪数组。</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.border</span>(<span class="variable">@px</span>, <span class="variable">@style</span>,<span class="variable">@color</span>)&#123;    <span class="attribute">border</span>: <span class="variable">@arguments</span>;    &#125;<span class="selector-class">.container</span>&#123;    <span class="selector-class">.border</span>(<span class="number">1px</span> , solid, black);&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;    <span class="attribute">border</span>: <span class="number">1px</span>, solid, black;&#125;</span><br></pre></td></tr></table></figure>



<br>

<p><br><br><br><br><br></p>
<h3 id="6-Less计算"><a href="#6-Less计算" class="headerlink" title="6.Less计算"></a>6.Less计算</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;    <span class="attribute">width</span>: (<span class="number">100</span>+<span class="number">100px</span>);				<span class="comment">// 只有一个单位就可以&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>CSS里也有计算（通过cacl()计算，），但CSS内的直接计算会影响性能，建议使用less计算。</p>
<p><br><br><br><br><br></p>
<h3 id="7-继承-性能比混合高，灵活性没有混合强"><a href="#7-继承-性能比混合高，灵活性没有混合强" class="headerlink" title="7.继承(性能比混合高，灵活性没有混合强)"></a>7.继承(性能比混合高，灵活性没有混合强)</h3><p>使用混合可以大大减少我们less代码冗余，但是我们原生css内的代码量会变得冗长，这是我们不想见到的，这时混合就完成不了了，就有必要<code>了解继承</code>的用法。</p>
<p><code>继承不可以传参</code>。</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// themes文件.pinktheme&#123;			// 没有括号它就不再是混合，而是一个类名    color: pink;		// 放公用的代码&#125;// 原文件@import &quot;themes&quot;;        .container&#123;        header:extend(.pinktheme)&#123;		// extend()是一个函数括号内加类名            width: 200px;			// 可能要改的代码    	height: 200px;        &#125;&#125;// 因为extend为同级也可以写成.container&#123;        header&#123;	            &amp;:extend(.pinktheme);            width: 200px;    	height: 200px;        &#125;&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.pinktheme</span>,						<span class="selector-class">.container</span> <span class="selector-tag">header</span> &#123;  <span class="attribute">color</span>: pink;&#125;<span class="selector-class">.container</span> <span class="selector-tag">header</span> &#123;  <span class="attribute">width</span>: <span class="number">200px</span>;  <span class="attribute">height</span>: <span class="number">200px</span>;&#125;</span><br></pre></td></tr></table></figure>



<p>当需要继承全部状态时</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// themes.pinktheme&#123;    color: pink;    &amp;:hover&#123;			// 有状态        background: grey;    &#125;&#125;// 原文件.container&#123;        header&#123;	            &amp;:extend(.pinktheme all);			// 全部继承            width: 200px;    	height: 200px;        &#125;&#125;</span></span><br></pre></td></tr></table></figure>

<br>

<p><br><br><br><br><br></p>
<h3 id="8-避免编译"><a href="#8-避免编译" class="headerlink" title="8.避免编译"></a>8.避免编译</h3><p>使用**~””**,引号内包裹的less代码会被避免编译，如是计算，由浏览器计算。</p>
]]></content>
      <categories>
        <category>web前端</category>
        <category>Node</category>
      </categories>
      <tags>
        <tag>Less</tag>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>最强的文本编辑器Vim，其实也没有怎么难！|入门教程|</title>
    <url>/2021/06/22/Vim/</url>
    <content><![CDATA[<h1 id="最强的文本编辑器Vim，其实也没有怎么难！-入门教程"><a href="#最强的文本编辑器Vim，其实也没有怎么难！-入门教程" class="headerlink" title="最强的文本编辑器Vim，其实也没有怎么难！|入门教程|"></a>最强的文本编辑器Vim，其实也没有怎么难！|入门教程|</h1><p>​    Vim作为一款<code>上古神器</code>，从人人鄙视到爱不释手，它有几十年的历史， 它是最强的<strong>文本编辑器</strong>,没有之一，说Vim不好用的人都是不会用Vim的人。</p>
<p>​    一开始可能有点难，只有自己还没有习惯它，熟练后可以让你的效率翻倍。</p>
<p>​    在这里我只提供一些最常用的命令，没有必要一下就把环境做的太繁杂，它有好多插件，这是你用上手了，感觉Vim的常用命令不能满足你的速度了，后后慢慢来学习进阶的命令也好，设置Vim环境也好，这都是后面的事。</p>
<p>​    这样想的话是不是vim也没什么难的了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim learn-vim.txt			</span><br></pre></td></tr></table></figure>

<p><code>用vim进入文件，有的话直接进入，没有vim会自动建立。</code></p>
<br>

<h2 id="Vim模式"><a href="#Vim模式" class="headerlink" title="Vim模式"></a>Vim模式</h2><ol>
<li>命令模式</li>
<li>插入模式——输入文本</li>
</ol>
<p><strong>注意：</strong> Vim不只两种模式，但现在我们就当作有两种，以免混淆。</p>
<p>输入i切换为插入模式（默认状态下）</p>
<p>Esc键——从其它模式回到默认模式（这里当作是命令模式）</p>
<p><br><br><br></p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h3><p>h    左</p>
<p>j     下</p>
<p>k    上</p>
<p>l    右</p>
<p>0     光标跳到当前行的行首</p>
<p>$    光标跳到当前行的行尾</p>
<p>14G     跳到14行</p>
<p>:14     跳到14行</p>
<p>gg    到文件开头</p>
<p>G    光标跳到文件最后一行</p>
<p>w    跳到下个单词开头（word）</p>
<p>b    跳到上个单词开头（backsapce）</p>
<p><br><br><br><br><br></p>
<h3 id="修改内容"><a href="#修改内容" class="headerlink" title="修改内容"></a>修改内容</h3><p>i    在光标所在位置前开始插入。(insert )</p>
<p>I    在光标行首插入</p>
<p>a    在光标所在位置后开始 插入。（append）</p>
<p>A:    在光标行末插入</p>
<p>o    在光标下面插入空行 (open a line)</p>
<p>O    在光标上面插入空行</p>
<p>x    删除光标所在位置一个字符</p>
<p><br><br><br><br><br> </p>
<h4 id="delete类"><a href="#delete类" class="headerlink" title="delete类"></a>delete类</h4><p>D    删除当前光标后面的内容</p>
<p>dd    删除当前行</p>
<p>dw    删除一个词(delet word)</p>
<p><br><br><br><br></p>
<h4 id="change类"><a href="#change类" class="headerlink" title="change类"></a>change类</h4><p>ci”        修改“”里的内容</p>
<p>ct)    删除（）里字符进行修改（change to 括号）</p>
<p>ciw     删除当前光标单词后进入插入模式（change inner word修改单词）</p>
<br>

<br>

<br>

<h3 id="日常操作"><a href="#日常操作" class="headerlink" title="日常操作"></a>日常操作</h3><p>y     复制当前行</p>
<p>p    粘贴(paste)</p>
<p>u    撤销，可多次</p>
<p>.     执行上一次命令</p>
<p>:g/a/s//b/g     把文件里全部的a换成b</p>
<p>ctrl+insert =&gt; ctrl+c</p>
<p>shift+insert =&gt; ctrl+v</p>
<p>以上两个命令在windows里通用</p>
<p>ctrl+u     向上翻半页（forward）</p>
<p>ctrl +d    向下番半页(upward)</p>
<p><br><br><br><br><br><br></p>
<h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><p>/abc    在当前文件内查找“abc”</p>
<p>n    查找下一个</p>
<p>N    查找上一个</p>
<p>fs    在当前行查找s字符，；分号下一个</p>
<p><br><br><br><br></p>
<h4 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h4><p>:w   存盘</p>
<p>:wq     存盘退出 </p>
<p>:x     存盘退出 </p>
<p>:q    不存盘退出 </p>
<p><br><br><br></p>
<p><strong>注意</strong>：vim是文本编辑器，你可以用它写<strong>C/C++<strong>什么，但不推荐你用它编辑一些<u>前端类的，图片视频 什么过多</u>的项目，我就是一名前端工程师，我平时写程序 时用的还有</strong>VScode</strong>,我用vim快速编辑一些文本文件什么，你也可以在VSC里安装vim的插件让你编辑前端项目到效率更高。</p>
]]></content>
      <tags>
        <tag>Node</tag>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>demo</title>
    <url>/2021/06/04/demo/</url>
    <content><![CDATA[<p><video src="http://qu63zmqgg.hb-bkt.clouddn.com/%E8%A2%AB%E6%84%9F%E5%8A%A8%E7%9A%84c.c20191209_144154_Trim.mp4" controls preload="metadata" width="100%" loop></video></p>
<p><a href="http://qu63zmqgg.hb-bkt.clouddn.com/%E8%A2%AB%E6%84%9F%E5%8A%A8%E7%9A%84c.c20191209_144154_Trim.mp4" download="./video/被感动的c.c20191209_144154_Trim.mp4">downloadvideo</a></p>
<p><a href="http://qu63zmqgg.hb-bkt.clouddn.com/qu63zmqgg.hb-bkt.clouddn.com/video/%E8%A2%AB%E6%84%9F%E5%8A%A8%E7%9A%84c.c20191209_144154_Trim.mp4">download</a></p>
<p><a href="../cdn/file/初始化.txt">txt</a></p>
<p>李厚霖ddfsdf</p>
<p><br><br><br><br></p>
<p>asdfd</p>
<div class="demo"></div>
<script>
    function tt(){
        $('.demo').slider({
    imgList: [
        {
            img: 'https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/04/13/2a877ea5da1292c817cbc2a254c01c31.png',
            a: '跳转url地址',
        },
        {
            img: 'https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/04/13/5005109d1aa2ffd28984c2b02b8cbfbe.png',
            a: '跳转url地址',
        },
        {
            img: 'https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/04/13/163a2ade4361d1ed705ed523091af67e.png',
            a: '跳转url地址',
        }
    ], //图片的列表，a属性里面存放的是网络地址，img存放的是图片地址
    width: "100%", //图片的宽
    height: 500, //图片的高
    isAuto: false, //是否自动轮播
    moveTime: 3000, //运动时间
    direction: 'right', //轮播的方向
    btnWidth: 30, //按钮的宽
    btnHeight: 30, //按钮的高
    spanWidth: 10, //span按钮的宽
    spanHeight: 10, //span按钮的高
    spanColor: '#fff', //span按钮的颜色
    activeSpanColor: 'red', //选中的span颜色
    btnBackgroundColor: 'rgba(0, 0, 0, 0.3)', //两侧按钮的颜色
    spanRadius: '50%', //span按钮的圆角程度
    spanMargin: 3, //span之间的距离
})
    }
    window.addEventListener('DOMContentLoaded',tt)
</script>
]]></content>
  </entry>
  <entry>
    <title>hexo框架&quot;踩坑&quot;大合集</title>
    <url>/2021/06/03/hexo%E6%A1%86%E6%9E%B6%E2%80%9D%E8%B8%A9%E5%9D%91%E2%80%9C%E5%A4%A7%E5%90%88%E9%9B%86/</url>
    <content><![CDATA[<h1 id="hexo框架”踩坑“大合集"><a href="#hexo框架”踩坑“大合集" class="headerlink" title="hexo框架”踩坑“大合集"></a>hexo框架”踩坑“大合集</h1><p><br><br><br></p>
<p>​        这里是我在搭建个人博客到遇到的一些问题，因为是自己也是从网上学习研究的，所以遇到了不少奇奇怪怪的问题，在这里总结一下，可能对你有帮助。</p>
<p><br><br><br></p>
<h2 id="一、-ERROR-Deployer-not-found-git"><a href="#一、-ERROR-Deployer-not-found-git" class="headerlink" title="一、 ERROR Deployer not found: git"></a>一、 ERROR Deployer not found: git</h2><p><br>        没有在自己的博客安装git插件的问题。只安装了git工具软件还不够，我们的博客的环境里也一定要有git插件。</p>
<p>​        我们只要在自己的博客目录下。<br></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>

<p>就可以。</p>
<p><br><br><br></p>
<h2 id="二、-No-such-file-or-directory-和"><a href="#二、-No-such-file-or-directory-和" class="headerlink" title="二、 No such file or directory 和"></a>二、 No such file or directory 和</h2><h2 id="fatal-Could-not-read-from-remote-repository"><a href="#fatal-Could-not-read-from-remote-repository" class="headerlink" title="fatal: Could not read from remote repository"></a>fatal: Could not read from remote repository</h2><br>

<h4 id="问题原因："><a href="#问题原因：" class="headerlink" title="问题原因："></a>问题原因：</h4><p>出现这错误一般是以下两种原因：</p>
<ul>
<li><p>客户端与服务端未生成 ssh key</p>
</li>
<li><p>客户端与服务端的ssh key<strong>不匹配</strong></p>
<br></li>
</ul>
<p>​        这两个都是我们的ssh密钥出了问题（当你配置多个密钥或误操作很常见），我们在第一次在配置ssh时也出现了这个，也就是说我们没有可以用的密钥，所以我们解决的方法也很明确了，我们把旧的密钥删除掉，重新配置ssh。C:\Users\你的用户\.ssh下的文件删除（如果你有多个密钥注意只把有问题的密钥删除），如果你没有改名字默认是这几个</p>
<br>



<p><img src="/2021/06/03/hexo%E6%A1%86%E6%9E%B6%E2%80%9D%E8%B8%A9%E5%9D%91%E2%80%9C%E5%A4%A7%E5%90%88%E9%9B%86/Snipaste_2021-06-03_09-45-21.png"></p>
<p>​        我们把前两个删除就可以（只有一个密钥时可以三个都删除，known_hosts在建立 密钥时会自动生成）之后就是</p>
<br>

<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your_email@youremail.com</span><br></pre></td></tr></table></figure>

<p>重新建立ssh。 密钥的设置方法详见我的<strong>博文</strong>   <a href="https://crosscloudmoon.github.io/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/">搭建个人博客没有那么难！|详细教程|hexo框架|github|</a>里的关于ssh的内容。</p>
<p><br><br></p>
<h2 id="三、extends-includes-layout-pug-block-content-recent-posts-recent-posts-include-includes-recent-posts-pug-include-includes-pagination-pug"><a href="#三、extends-includes-layout-pug-block-content-recent-posts-recent-posts-include-includes-recent-posts-pug-include-includes-pagination-pug" class="headerlink" title="三、extends includes/layout.pug block content #recent-posts.recent-posts include includes/recent-posts.pug include includes/pagination.pug"></a>三、extends includes/layout.pug block content #recent-posts.recent-posts include includes/recent-posts.pug include includes/pagination.pug</h2><br>

<p>​        在本地预览时浏览器里出现了这个，可能是我们的博客在本地渲染时出了问题，解决方法也很简单，我们安装一些在浏览器里预览的插件。</p>
<br>

<p>​        在我们的博客目录下</p>
<br>

<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br></pre></td></tr></table></figure>

<p>​    安装后，我们以后修改保存后就可以使用插件实时本地预览，</p>
<br>



<p><img src="/2021/06/03/hexo%E6%A1%86%E6%9E%B6%E2%80%9D%E8%B8%A9%E5%9D%91%E2%80%9C%E5%A4%A7%E5%90%88%E9%9B%86/Snipaste_2021-06-01_21-25-52.png"></p>
<p><br><br><br><br><br></p>
<h2 id="四、Nunjucks-Error"><a href="#四、Nunjucks-Error" class="headerlink" title="四、Nunjucks Error:"></a>四、Nunjucks Error:</h2><br>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">为引用问题，大多是我们博文用 &#123;%%&#125;插入图片时的错误，我们只要在&#123;&#125;与%之间加上空格就可以改为&#123; %...% &#125;。</span><br></pre></td></tr></table></figure>

<p><br><br><br></p>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><br>

<ol>
<li><strong>在下载插件或是clone项目时的报错</strong>多半是网络问题，大家也知道github是国外的网址，在国内有时很不稳定，项目下不下来里，推荐大家直接下载压缩包再解压到自己的博客目录。</li>
<li><strong>本地预览好后上传到远端修改没有生效</strong>。没有报错，一看自己的博客自己的修改就是没有生成，是不是很奇怪，哈哈，不用急，这个太正常了。在hexo d 后我们的更新可能立刻生成，也可能过一段时间生成，可能是几分钟也可能是几天。这个就有点不方便，没办法服务器要一点点处理你的项目。这就是为什么刚开始博客东西少的时候hexo d 后效果马上就生成，后来东西多了，就会变慢 。</li>
<li><strong>推到远端后更新博客是空白页</strong>。这是可能是你密钥出了问题，本地与远端关联失败就没有可见了。可以重新设置ssh密钥。</li>
<li><strong>关于本地预览，推到远端报错。</strong>如果不是一些缺少环境/缺少插件什么的fatal致命错误，一些warning警告可以无视。如果hexo s ,hexo d 出现了fatal错误无法正常运行的问题，也可能是网络不稳定（换个网络比如手机热点），或是github网址本身的问题，你可以等一会再试试可能 就不出错了。</li>
<li>有关博客打开很慢的问题。<ol>
<li>博客的东西过多</li>
<li>网络不稳定</li>
<li>github常有的问题，有时会很慢 </li>
</ol>
</li>
<li> 当有敏感词如一些编程类字符可能造成 hexo g 时的报错，我们可以放在代码块里。</li>
</ol>
<p>解决： 优化自己的博客使用懒加载等</p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>关于实现博客本地实时预览，渲染|hexo框架|</title>
    <url>/2021/06/13/%E5%85%B3%E4%BA%8E%E5%AE%9E%E7%8E%B0%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E5%AE%9E%E6%97%B6%E9%A2%84%E8%A7%88%EF%BC%8C%E6%B8%B2%E6%9F%93hexo%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[ <br>

<h1 id="关于实现博客本地实时预览，渲染-hexo框架"><a href="#关于实现博客本地实时预览，渲染-hexo框架" class="headerlink" title="关于实现博客本地实时预览，渲染|hexo框架|"></a>关于实现博客本地实时预览，渲染|hexo框架|</h1><br>

<p>​        相信有不少人受每次修改配置后在<strong>本地预览</strong>都要更新我们的博客，刷新我们的页面的困扰。我也感觉这个很烦，一下修改一套出错了不好找，修一行预览下又太烦。</p>
<p>​        这时我们的福音来了就是这些<strong>预览插件</strong>。</p>
<p>​        在自己博客的目录下</p>
<br>

<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br></pre></td></tr></table></figure>

<p>​    <br></p>
<p>​    我在之前的<strong>”踩坑“全集</strong>也有提过这些插件，我们在本地预览时就算不出错，使用这些预览插件也是很好的。</p>
<p>​        我们hexo s 后修改_config.yml等文件，我们的博客会实时更新。</p>
<p><img src="/2021/06/13/%E5%85%B3%E4%BA%8E%E5%AE%9E%E7%8E%B0%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E5%AE%9E%E6%97%B6%E9%A2%84%E8%A7%88%EF%BC%8C%E6%B8%B2%E6%9F%93hexo%E6%A1%86%E6%9E%B6/Snipaste_2021-06-01_21-25-52.png"></p>
<p>​    <br>    </p>
<p>是不是很方便。哈哈，懒人福利了。</p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>如何为Typora换肤！|教程|</title>
    <url>/2021/06/15/%E5%A6%82%E4%BD%95%E4%B8%BATypora%E6%8D%A2%E8%82%A4%EF%BC%81-%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<br>

<br>

<br>

<h1 id="如何为Typora换肤！-教程"><a href="#如何为Typora换肤！-教程" class="headerlink" title="如何为Typora换肤！|教程|"></a>如何为Typora换肤！|教程|</h1><br>

<p>​    Typora是一款<strong>Markdown编辑</strong>软件，它在记笔记方面十分出众，尤其在计算机行业，深受广大编程工作人员的喜爱。但是原生的<strong>Typora皮肤</strong>在一些编程语言的代码上的显示上有一些问题，代码块与背景的颜色过于相似让人不好分别，所以就有不少换上自己喜欢的主题，官网也有提供换肤文档，但因为是外文，有些地方可能不直观，我在这里提供教程。</p>
<br>

<br>

<br>

<p>我们打开文件里的<strong>偏好设置</strong>。</p>
<br>

<p><img src="/2021/06/15/%E5%A6%82%E4%BD%95%E4%B8%BATypora%E6%8D%A2%E8%82%A4%EF%BC%81-%E6%95%99%E7%A8%8B/Snipaste_2021-06-15_20-20-27.png"></p>
<br>

<br>

<br>

<p>在这里可以获取主题，  <a href="https://theme.typora.io/">https://theme.typora.io/</a></p>
<br>

<p><img src="/2021/06/15/%E5%A6%82%E4%BD%95%E4%B8%BATypora%E6%8D%A2%E8%82%A4%EF%BC%81-%E6%95%99%E7%A8%8B/Snipaste_2021-06-15_20-19-01.png"></p>
<br>

<br>

<br>

<p>找一个自己喜欢的下载（想要更多精美主题可以自己到github上找有很多）。</p>
<p>就这个了。</p>
<br>

<p><img src="/2021/06/15/%E5%A6%82%E4%BD%95%E4%B8%BATypora%E6%8D%A2%E8%82%A4%EF%BC%81-%E6%95%99%E7%A8%8B/Snipaste_2021-06-15_20-37-14.png"></p>
<br>

<br>

<br>

<p>解压后，拷贝主题文件。</p>
<br>

<p><img src="/2021/06/15/%E5%A6%82%E4%BD%95%E4%B8%BATypora%E6%8D%A2%E8%82%A4%EF%BC%81-%E6%95%99%E7%A8%8B/Snipaste_2021-06-15_20-40-51.png"></p>
<p>注意：有的主题有<u>白天与黑夜两种</u>模式，两种都要就两个的对应文件都拷贝。</p>
<br>

<br>

<br>

<p>例如这个主题。</p>
<br>

<p><img src="/2021/06/15/%E5%A6%82%E4%BD%95%E4%B8%BATypora%E6%8D%A2%E8%82%A4%EF%BC%81-%E6%95%99%E7%A8%8B/Snipaste_2021-06-15_20-43-31.png"></p>
<br>

<br>

<br>

<br>

<p>打开主题文件夹</p>
<br>

<p><img src="/2021/06/15/%E5%A6%82%E4%BD%95%E4%B8%BATypora%E6%8D%A2%E8%82%A4%EF%BC%81-%E6%95%99%E7%A8%8B/Snipaste_2021-06-15_20-20-42.png"></p>
<br>

<br>

<p>把刚刚我们的文件粘进去。</p>
<br>

<p><img src="/2021/06/15/%E5%A6%82%E4%BD%95%E4%B8%BATypora%E6%8D%A2%E8%82%A4%EF%BC%81-%E6%95%99%E7%A8%8B/Snipaste_2021-06-15_20-46-42.png"></p>
<br>

<p>回到设置，设置自己新加的主题。</p>
<br>

<p><img src="/2021/06/15/%E5%A6%82%E4%BD%95%E4%B8%BATypora%E6%8D%A2%E8%82%A4%EF%BC%81-%E6%95%99%E7%A8%8B/Snipaste_2021-06-15_20-45-39.png"></p>
<br>

<br>

<br>

<br>

<p> 要有深色主题就一起设置，我这里就只设置浅色。</p>
<p><img src="/2021/06/15/%E5%A6%82%E4%BD%95%E4%B8%BATypora%E6%8D%A2%E8%82%A4%EF%BC%81-%E6%95%99%E7%A8%8B/Snipaste_2021-06-15_20-46-03.png"></p>
<br>

<br>

<br>

<p>这样我们就可以用自己喜欢的主题了。</p>
<br>

<p><img src="/2021/06/15/%E5%A6%82%E4%BD%95%E4%B8%BATypora%E6%8D%A2%E8%82%A4%EF%BC%81-%E6%95%99%E7%A8%8B/Snipaste_2021-06-15_20-49-45.png"></p>
<p>是不是更美观了。</p>
<br>
]]></content>
      <tags>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建个人博客没有那么难！|详细教程|hexo框架|github|</title>
    <url>/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/</url>
    <content><![CDATA[<br>

<br>

<h1 id="搭建个人博客没有那么难！-详细教程-hexo框架-github"><a href="#搭建个人博客没有那么难！-详细教程-hexo框架-github" class="headerlink" title="搭建个人博客没有那么难！|详细教程|hexo框架|github|"></a>搭建个人博客没有那么难！|详细教程|hexo框架|github|</h1><p>​        <br></p>
<br>

<p>​        大家一定见过网上一些人的博客，自己一定也多少心里不情想，自己要是也有一个漂亮的博客要多好。我也是这样，所以在自己的博客搭建好后，我第一想的是把自己经验也好，主要是<strong>经历</strong>分享给大家！（因为踩了不好坑）</p>
<p>​        首先本不打算多説，但我想想还有必要的，告诉一下大家为什么要有自己的博客。对于从事计算机行业的人来説有一个自己的博客十分重要（特别是前端），当我们在投简历的时候，它是我们的排面，一个人的写照，在面试时我们的时间是有限，有时候我们可能不能让面官正确了解到自己，所以如果你要是有一个博客就好了，我们可以把它写在简历里（这在面试时是十分加分的），我们可以在自己博客里写自己的技术向博文也好，甚至是学习笔记也可以，重要的是让别人可以了解到你！</p>
<p>​        如果你不和计算机行业相关，有一个自己博客也不失为一件<strong>炫酷</strong>的事。废话到这，下面是具体的教程。（本人用是<strong>hexo框架</strong>，我也推荐大家使用，因为用它的人多，有什么问题也很好从网上查到）</p>
<br>

<br>

<br>

<h2 id="我们要做几件事"><a href="#我们要做几件事" class="headerlink" title="我们要做几件事"></a>我们要做几件事</h2><ol>
<li>下载搭建博客必要的软件。</li>
<li>在自己的电脑上建立<strong>本地博客</strong>。</li>
<li>把个人博客部署到<strong>远端服务器</strong>。</li>
</ol>
<br>

<br>

<br>

<br>

<h2 id="一、-前期准备工作（下载工具等）"><a href="#一、-前期准备工作（下载工具等）" class="headerlink" title="一、 前期准备工作（下载工具等）"></a>一、 前期准备工作（下载工具等）</h2><br>

<ol>
<li>下载node.js</li>
<li>下载git</li>
<li>有一个github帐号</li>
</ol>
<br>

<br>

<br>

<h3 id="下载node-js"><a href="#下载node-js" class="headerlink" title="下载node.js"></a>下载node.js</h3><br>

<p>​        直接从官网下载就可以。<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p>
<p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_09-25-16.png"></p>
<p>​        安装十分简单，我们采取<strong>傻瓜式安装</strong> ，一直下一步。</p>
<p>​        安装好后，我们也可以用node -命令来查看自己是否安装成功。</p>
<p>我们打开cmd(win+r 输入cmd回车)查看。(我的电脑用的是windows,苹果和用Linux的小伙伴的代码和我的略有不同，可以自己查下)之后的代码也是在cmd里操作的。</p>
<p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_09-34-57.png"></p>
<br>

<br>

<h3 id="下载git工具"><a href="#下载git工具" class="headerlink" title="下载git工具"></a>下载git工具</h3><br>

<p>同样我们也是在官网下载，<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p>
<p>直接下一步式安装 。</p>
<p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_16-12-47.png"></p>
<p>很简单，这里就不多赘述了，安装好后右击就多了git的几个选项。</p>
<p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_16-26-40.png"></p>
<br>

<br>

<br>

<h3 id="注册github帐号"><a href="#注册github帐号" class="headerlink" title="注册github帐号"></a>注册github帐号</h3><br>

<p>​        官网：<a href="https://github.com/">https://github.com/</a></p>
<p>注册帐号大家一定也是很常做了，我就不多説了，github有时很慢 ，注册时注意一下。</p>
<p>有算是有纯开然小白，上网查一下也就可以搞定的。</p>
<br>

<br>

<h2 id="二、本地部署博客"><a href="#二、本地部署博客" class="headerlink" title="二、本地部署博客"></a>二、本地部署博客</h2><br>

<p>首先我们使用<strong>npm</strong>（包管理工具）来安装淘宝的镜像源，我们还是在cmd里输入</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.toobao.org</span><br></pre></td></tr></table></figure>

<br>

<p>下载可能有点慢 ，不用急，你没卡！</p>
<p>同样你可以用<strong>cnpm -v</strong>(只要出现版本号就是成功了)检查下载是否成功。</p>
<p>现在我们就可以来安装hexo框架</p>
 <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p> hexo -v检查</p>
<br>

<p>​        现在可以本地搭建了，我们在自己的电脑根目录（如果你有多个 硬盘不固定是那个盘）下建立blog文件夹（位置，名字不是固定，也不建议改），我们之后的一切操作将在blog文件夹下进行。</p>
<p>​        这里我在c盘下建立</p>
<p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_09-58-33.png"></p>
<br>

<br>

<h4 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a><strong>初始化博客</strong></h4><br>

<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<p>当出现start blogging with Hexo!我们就是初始化成功了、。</p>
<p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_10-01-00.png"></p>
<br>

<p>我们的初始blog里有这些文件。</p>
<p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_11-10-22.png"></p>
<br>

<br>

<p>可能 有些小伙伴不太清楚我们的<strong>部署命令</strong>，我在这简单説下 ,这下面的几行命令是我们在使用博客会常常用到的</p>
<ol>
<li> hexo  clean         // 用来<strong>清理博客</strong>（用在生成前）</li>
<li>hexo  g                //  用来生成博客（我们配置了本地文件后，例如改了配置，修改了主题什么的，我们必须要生成一下，才可以用 hexo s 预览）</li>
<li> hexo s           // 用于<strong>本地预览博客</strong>（在推到远端前的预览，每次都到远端看结果会很不方便）</li>
<li> hexo d        // 把我们本地调试好的博客<strong>部署到服务器</strong>（这就是正式上线了）</li>
</ol>
<br>

<br>

<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_10-06-01.png"></p>
<br>

<p>我们可以用本地的4000端口访问博客。（在浏览器里输入<a href="http://localhost:4000/">http://localhost:4000</a>）</p>
<p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_10-09-09.png"></p>
<br>        

<p>打开后是不是很激动我们的博客有界面了！！！哈哈，后面还有很多工作，但有了一个界面还有很高兴的。这就是我们的初始界面，还没有主题，有了主题后会很漂亮的。</p>
<p> 好，我们ctrl+c断开我们的博客，开始后来的。</p>
<p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_10-13-09.png"></p>
<br>

<br>

<br>

<br>

<h2 id="三、把本地博客部署到远端"><a href="#三、把本地博客部署到远端" class="headerlink" title="三、把本地博客部署到远端"></a>三、把本地博客部署到远端</h2><p>​        我们借用github的服务器，把博客搭建在github上。</p>
<p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_10-23-38.png"></p>
<p>登入自己刚刚建立的帐号。这里我就用我自己的帐号作为例子，就不新建立 了。</p>
<p>新建一个仓库作为搭建博客的容器</p>
<p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_10-24-32.png"></p>
<br>

<br>

<p>** 仓库的名字<strong>一定要是自己github名字</strong>（xxxx.github.io），我们要通过这个名字访问我们的网址。我这里是crosscloudmoon.github.io</p>
<p>我用demo这个名字给大家演示。</p>
<p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_10-30-16.png"></p>
<br>

<br>

<p>建立 好后是这个样子的，仓库里还没有东西是一个空仓库</p>
<p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_10-39-19.png"></p>
<p>我们生成了一个网址一会要用到，仓库先放着，我们来进行之后的步骤。</p>
<p>github是基于git的网站，所以我们要使用git来使用github。</p>
<p>我们来安装下git的插件，回到cmd</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>

<p>可能 有一些<strong>warn 警告</strong>不用在意，不影响我们的操作。</p>
<p>我们dir看一下</p>
<p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_10-48-26.png"></p>
<br>

<br>

<p>我们打开**_config.yml**，你电脑上装了vim之类的编辑工具可以用，我这里用vscode打开。</p>
<br>

<p>我们需要配置config文件，在文档末写入以下命令。</p>
<p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_10-57-09.png"></p>
<br>

<p>** type,repo,branch关键字一定要有一个空格，要用单引号’’把内容包起来。</p>
<p>保存后，关闭。</p>
<br>

<br>

<br>

<br>

<h3 id="配置ssh密钥"><a href="#配置ssh密钥" class="headerlink" title="配置ssh密钥"></a>配置ssh密钥</h3><br>

<p>​        这个是我们使用git与<strong>github仓库</strong>关联的重要工序。不配置ssh我们的就没法与我们的远程服务器关联。</p>
<h4 id="生成ssh-key"><a href="#生成ssh-key" class="headerlink" title="生成ssh key"></a>生成ssh key</h4><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮件地址@youremail.com&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>你会看见这几行字</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;邮件地址@youremail.com&quot; // 你注册github的邮箱， 注意是大写C。</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):  // 这里是让设置你的路径我们直接回车，默认就好</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<br>

<p>系统会让你输入密码，我这<strong>推荐为空</strong>，因为每次上传到远端它都会让你转入密码，会有点不方便，当然你也可以设置。我这里就不设了，直接回车。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase):&lt;设置密码&gt;</span><br><span class="line">Enter same passphrase again:&lt;再次输入密码&gt;</span><br></pre></td></tr></table></figure>

<br>

<p>出现了这个 ，你的密钥就建立成功了</p>
<p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_16-43-07.png"></p>
<br>

<br>

<br>

<h4 id="关联SSH-key到github"><a href="#关联SSH-key到github" class="headerlink" title="关联SSH key到github"></a>关联SSH key到github</h4><br>

<p>在本地找到id_rsa.pub文件，C:\Users\你的用户\.ssh下</p>
<p>打开文件把内容全部复制</p>
<p>到github的设置</p>
<p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_16-50-15.png"></p>
<p>找到ssh</p>
<p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_16-50-49.png"></p>
<br>

<br>

<p>建立一个key</p>
<p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_16-51-25.png"></p>
<br>

<p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_16-52-42.png"></p>
<br>

<p><br><br></p>
<br>

<h4 id="设置用户信息"><a href="#设置用户信息" class="headerlink" title="设置用户信息"></a>设置用户信息</h4><br>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;...&quot;//输入注册时的username</span><br><span class="line">git config --global user.email  &quot;...@xxx.com&quot;//填写注册邮箱</span><br></pre></td></tr></table></figure>

<br>

<br>

<p><strong>SSH Key配置完成了</strong></p>
<p>我们用<strong>hexo d</strong> 把博客推到远端。</p>
<p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_11-05-00.png"></p>
<p>因为我不是第一次使用，直接就上传了，如果你是第一次上传，它会让输入用户，密码（就是我们建立github帐号用户密码）。</p>
<p>我们回到<strong>github刷新</strong>一下，发现我们的仓库多了东西，有了许多文件。</p>
<p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_11-11-51.png"></p>
<br>

<p>就是我们的本地文件。现在就可以在网上访问我们的网页了。</p>
<p>在浏览器中输入我们的网址。我这里是<a href="https://crosscloudmoon.github.io/">https://crosscloudmoon.github.io/</a></p>
<p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_11-17-42.png"></p>
<p>打开后是可以在网上访问的，我的界面可能和你的不太一样，因为我换了主题，hexo默认的主题为<strong>landscape</strong>，我的是butterfly。这是主题也是很 漂亮 的，我也很喜欢。</p>
<br>

<br>

<br>

<h2 id="下面我教大家如何更换主题。"><a href="#下面我教大家如何更换主题。" class="headerlink" title="下面我教大家如何更换主题。"></a>下面我教大家如何更换主题。</h2><br>

<p>​        换主题其实就是把github上的开源项目clone到我们自己的项目上。</p>
<p>​        <a href="https://github.com/jerryc127/hexo-theme-butterfly/tree/dev">https://github.com/jerryc127/hexo-theme-butterfly/tree/dev</a></p>
<p>这个是<strong>butterfly主题</strong>的开源地址，我使用的这个主题，大家也可以自己到网上找开源项目来下载。</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/jerryc127/hexo-theme-butterfly/<span class="built_in">tree</span>/dev.git themes/butterfly</span><br></pre></td></tr></table></figure>

<br>

<br>

<p>** clone如果很慢 ，甚至出错的可以直接下载压缩包后解压到自己的blog目录。</p>
<p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_15-49-10.png"></p>
<p>出现了这个明显的字样，你就下载成功了。</p>
<p>现在要修改config文件为butterfly主题，打开刚刚配置过的_config.yml</p>
<p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_15-53-12.png"></p>
<br>

<br>

<br>

<p>我们清理下</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>

<p>之后我们生成一下</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<p>本地预览一下</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<br>

<p>好，大功告成，这样我们的博客就正式上线，还有了主题。</p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
