<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>I&#39;m coding</title>
  
  <subtitle>And you?</subtitle>
  <link href="http://crosscloudmoon.github.io/atom.xml" rel="self"/>
  
  <link href="http://crosscloudmoon.github.io/"/>
  <updated>2021-07-05T11:46:00.405Z</updated>
  <id>http://crosscloudmoon.github.io/</id>
  
  <author>
    <name>穿雲月</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React</title>
    <link href="http://crosscloudmoon.github.io/2021/07/05/React/"/>
    <id>http://crosscloudmoon.github.io/2021/07/05/React/</id>
    <published>2021-07-05T11:44:47.000Z</published>
    <updated>2021-07-05T11:46:00.405Z</updated>
    
    <content type="html"><![CDATA[<p>函数与方法的分别在于方法后面有<strong>（）</strong>，函数 没有。</p><h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><p>​        <strong>React</strong>就是一个用于<em>构建用户界面</em>的<strong>JS库</strong>。</p><p>​        从<strong>MVC</strong>（框架）来看，React也就只是实现了v(view)的界面渲染，没有M(model)与c(controller).</p><p>​        起源于Facebook.</p><p>特点： 被互联网广泛使用，可以用于web开发(react)，也可以用于移动端的开发（react-native），甚至VR（react360）.</p><h2 id="React基本使用"><a href="#React基本使用" class="headerlink" title="React基本使用"></a>React基本使用</h2><h3 id="安装React"><a href="#安装React" class="headerlink" title="安装React"></a>安装React</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i react react-dom// 安装了两个包</span><br></pre></td></tr></table></figure><p>react包：为核心，提供创建元素，组件等功能。</p><p>react-dom包： 负责把创建的元素，组件渲染到界面。</p><p><strong>注意</strong>：在我们的项目里的终端里进行安装。</p><h3 id="React的使用"><a href="#React的使用" class="headerlink" title="React的使用"></a>React的使用</h3><h4 id="2-1引入js文件-顺序不能改变"><a href="#2-1引入js文件-顺序不能改变" class="headerlink" title="2.1引入js文件(顺序不能改变)"></a>2.1引入js文件(顺序不能改变)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./node_modules/react/umd/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./node_modules/react-dom/umd/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2创建React元素"><a href="#2-2创建React元素" class="headerlink" title="2.2创建React元素"></a>2.2创建React元素</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> title = React.createElement(<span class="string">&#x27;h1&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;Hello React&#x27;</span>)<span class="comment">// 参数：元素名称，元素属性，元素的子节点</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3渲染React元素到页面"><a href="#2-3渲染React元素到页面" class="headerlink" title="2.3渲染React元素到页面"></a>2.3渲染React元素到页面</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> title = React.createElement(<span class="string">&#x27;h1&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;Hello React&#x27;</span>)</span></span><br><span class="line"><span class="javascript">       ReactDOM.render(title, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)) <span class="comment">// 渲染到页面</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>渲染到叫root的挂载点下，其实就是作为子元素渲染到一个元素下。</p><h3 id="创建元素的方法"><a href="#创建元素的方法" class="headerlink" title="创建元素的方法"></a>创建元素的方法</h3><h4 id="React-createElement-知道就可以）"><a href="#React-createElement-知道就可以）" class="headerlink" title="React.createElement(知道就可以）"></a>React.createElement(知道就可以）</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> title = React.createElement(<span class="string">&#x27;h1&#x27;</span>, &#123;<span class="attr">color</span>: red, <span class="attr">id</span>: <span class="string">&#x27;p1&#x27;</span>&#125;,  <span class="string">&#x27;Hello React&#x27;</span>)<span class="comment">// 多个属性时用对象</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JSX的基本使用"><a href="#JSX的基本使用" class="headerlink" title="JSX的基本使用"></a>JSX的基本使用</h2><h3 id="JSX的列表渲染"><a href="#JSX的列表渲染" class="headerlink" title="JSX的列表渲染"></a>JSX的列表渲染</h3><p>要渲染数据 ，要使用js语法中的**map(）*<em>方法(**key属性**是一定要添加的且必须*<em>唯一)</em></em></p><p>** 不要用索引来作为key，可能会出错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cosnt title = [</span><br><span class="line">    &#123;<span class="attr">id</span>: a, <span class="attr">name</span>: <span class="string">&#x27;aaa&#x27;</span>&#125;</span><br><span class="line">    &#123;<span class="attr">id</span>: b, <span class="attr">name</span>: <span class="string">&#x27;bbb&#x27;</span>&#125;</span><br><span class="line">    &#123;<span class="attr">id</span>: c, <span class="attr">name</span>: <span class="string">&#x27;ccc&#x27;</span>&#125; </span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const list =( </span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &#123;title.map (item =&gt; &lt;li key=&#123;item.id&#125;&gt;&#123;item.name&#125;&lt;/li&gt;)&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="JSX样式处理"><a href="#JSX样式处理" class="headerlink" title="JSX样式处理"></a>JSX样式处理</h3><ol><li><p>行内样式——style</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 style=&#123;&#123;color: &#x27;red&#x27;backgroundColor: &#x27;green&#x27;&#125;&#125;&gt;</span><br><span class="line">.....</span><br><span class="line">&lt;/h1&gt;   </span><br></pre></td></tr></table></figure></li><li><p>className(推荐)</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 className=&#x27;title&#x27;&gt;&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p> 与css一样在对照的css文件下写样式（文件目录中的css/index.css）</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#x27;./css/index.css&#x27;  // 在index.js里引入css</span><br></pre></td></tr></table></figure></li></ol><h2 id="React组件-最重要的内容"><a href="#React组件-最重要的内容" class="headerlink" title="React组件(最重要的内容)"></a>React组件(最重要的内容)</h2><p>组件是React的重要内容，使用React也可以説是在使用组件</p><p>页面总是以多个组合构成，多个组件的组合实现完整页面</p><p>特点： 可复用，独立性，可组合</p><h3 id="React组件的创建"><a href="#React组件的创建" class="headerlink" title="React组件的创建"></a>React组件的创建</h3><ol><li><p>使用函数创建</p><p> ​    也叫<strong>函数组件</strong>，即使用JS函数创建的组件 （必须以<strong>大写字母</strong>开头）</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function Hoooo()&#123;</span><br><span class="line">    return (&lt;div&gt;.....&lt;/div&gt;)  // 必须要有返回值，为null时表示不渲染售内容</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(&lt;Hello /&gt;, root)   // 以标签形式渲染函数组件， 也可以是双标签</span><br></pre></td></tr></table></figure></li><li><p>使用类创建</p></li></ol><p>​     使用ES6的class创建的组件 ，即类组件（大写开头）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Hello extends React.Component &#123;  //  类组件应该继承父类React.Component</span><br><span class="line">    redner() &#123;                         //类组件至少要有一个render()方法</span><br><span class="line">        return &lt;div&gt; .....&lt;/div&gt;               // 同函数组件也必须要有返回值 </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(&lt;Hello /&gt;, root)</span><br></pre></td></tr></table></figure><h3 id="抽离React组件为独立JS文件"><a href="#抽离React组件为独立JS文件" class="headerlink" title="抽离React组件为独立JS文件"></a>抽离React组件为独立JS文件</h3><ol><li>创建文件（组件.js)</li><li>在独立j文件里导入React（组件.js)</li><li>创建组件（组件.js)</li><li>导出组件（组件.js)</li><li>在index.js中导入组件.js</li><li>渲染组件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//组件.js</span><br><span class="line">import React from &#x27;react&#x27;             // 导入</span><br><span class="line">class Hooo extends React.Component &#123;</span><br><span class="line">    redner ()&#123;</span><br><span class="line">        return &lt;div&gt; ......&lt;/div&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default Hoooo             //导出</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// index.js</span><br><span class="line">import Hooo from &#x27;./Hooo&#x27;</span><br><span class="line">//渲染</span><br><span class="line">ReactDOM.redner(&lt;Hoooo /&gt;, root)</span><br></pre></td></tr></table></figure><h2 id="React-事件处理"><a href="#React-事件处理" class="headerlink" title="React 事件处理"></a>React 事件处理</h2><h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><p>语法与DOM相似</p><p>** 在React中事件用**{}<strong>，与DOM里的</strong>“”**不同</p><p>&lt;button <strong>onClick**=<strong>{</strong>() =&gt; {}</strong>}**&gt;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Hooo extends React.Component &#123;</span><br><span class="line">    handleClick() &#123;</span><br><span class="line">        console.log(&#x27;onClick&#x27;)     //在类组件里使用方法</span><br><span class="line">    &#125;</span><br><span class="line">    render ()&#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;button onClick = &#123;this.handleClick&#125;&gt;...&lt;/button&gt;  //可以使用this</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function App()&#123;</span><br><span class="line">function handleClick ()&#123;          //函数组件里使用函数</span><br><span class="line">console.log(&#x27;onClick&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">    return (</span><br><span class="line">    &lt;button onClick=&#123;handleClick&#125;&gt;...&lt;/button&gt;  //不可以使用this</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p>React 中也叫 <strong>合成对象</strong>（无兼容问题）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Hooo extends React.Component &#123;   </span><br><span class="line">    handleClick(e) &#123;        </span><br><span class="line">       e.preventEdfault)()           //阻止默认行为</span><br><span class="line">       console.log(&#x27;onClick&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">    render ()&#123;        </span><br><span class="line">         return (           </span><br><span class="line">             &lt;a herf=&quot;http://www.baidu.com&quot; onClick=&#123;this.handleClick&#125;&gt;百度&lt;/a&gt;  </span><br><span class="line">            )   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="有状态组件与无状态组件"><a href="#有状态组件与无状态组件" class="headerlink" title="有状态组件与无状态组件"></a>有状态组件与无状态组件</h2><p><strong>函数组件</strong>为无状态组件，<strong>类组件</strong>即为有状态组件</p><p>状态就是<strong>数据</strong> ，函数组件 没有自己的状态，只用来展示静态的数据 ，类组件有自己的状态，可以更新UI,让页面动起来。</p><p>** 总为状态的使用函数组件，动态的，要与用户交互的用类组件 。</p><h3 id="state的基本使用"><a href="#state的基本使用" class="headerlink" title="state的基本使用"></a>state的基本使用</h3><p>state即数据 ，是组件 的<strong>私有数据</strong> （只能在组件内部使用），state 的值 是一个<strong>对象</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class App extends react.Component&#123;</span><br><span class="line">    constructor()&#123;          //ES6 规范    </span><br><span class="line">        super()// 必须要有</span><br><span class="line">        // 初始化</span><br><span class="line">        this.state = &#123;</span><br><span class="line">            count: 0</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render( )&#123;</span><br><span class="line">        return()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class App extends react.Component&#123;</span><br><span class="line">    // 简化语法 (推荐)</span><br><span class="line">    state = &#123;</span><br><span class="line">        count: 0</span><br><span class="line">    &#125;</span><br><span class="line"> return (</span><br><span class="line">    &lt;p&gt;&#123;this.state.count&#125;&lt;/p&gt; // 使用state</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用setState修改状态"><a href="#使用setState修改状态" class="headerlink" title="使用setState修改状态"></a>使用setState修改状态</h3><p>可以用setState（）来修改数据，但<strong>不要直接修改state中的值</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;() =&gt; &#123;</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            count: this.state.count+1</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;&#125;&gt;</span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure><h3 id="JSX-抽离事件处理程序"><a href="#JSX-抽离事件处理程序" class="headerlink" title="JSX 抽离事件处理程序"></a>JSX 抽离事件处理程序</h3><p>​    为解决过多JS代码，引起的代码混乱，我们建议将逻辑抽离到单独的方法中。</p><p>** <strong>this的指向</strong>会出问题，需要解决。</p><ol><li><p>用箭头函数解决</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">onClickButton()&#123;</span><br><span class="line">this.setState(&#123; //方法中的this指向button的this </span><br><span class="line">        ......</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">     // 箭头函数本没有this, this指向外部</span><br><span class="line">render( )&#123;</span><br><span class="line">    return(</span><br><span class="line">        &lt;button (onClick=&#123;()=&gt;this.onClickButton&#125;&gt;</span><br><span class="line">        // this 指向render()</span><br><span class="line">        &lt;/button&gt; )</span><br><span class="line">    &#125;           </span><br></pre></td></tr></table></figure></li><li><p>用bind()方法解决</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class App extends react.Component&#123;</span><br><span class="line">    constructor()&#123;             </span><br><span class="line">        super(</span><br><span class="line">            // 程序会先运行super后执行render，所以也可以把state初始化也写在super中</span><br><span class="line">        this.state = &#123;   // 注意this.</span><br><span class="line">        count: 0</span><br><span class="line">    &#125;</span><br><span class="line">            this.onClickButton = this.onClickButton.bind(this) // 必须在super方法里绑定</span><br><span class="line">        )</span><br><span class="line">        &#125;</span><br><span class="line">    //  省略</span><br><span class="line">    &#125;</span><br><span class="line">    render( )&#123;</span><br><span class="line">        return(&lt;button onClick=&#123;this.onClickbutton&#125;&gt;&lt;/button&gt;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>用class实例方法解决</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">onClickButton = ()=&gt; &#123;// 直接把方法写成箭头函数</span><br><span class="line">this.setState(&#123;...&#125;)</span><br><span class="line">&#125;</span><br><span class="line">                 </span><br><span class="line">                 </span><br><span class="line"> render() &#123;</span><br><span class="line">       return(&lt;button onClick=&#123;this.onClickbutton&#125;&gt;&lt;/button&gt;)</span><br><span class="line">   &#125;               </span><br></pre></td></tr></table></figure><h2 id="表单处理"><a href="#表单处理" class="headerlink" title="表单处理"></a>表单处理</h2><h3 id="受控组件"><a href="#受控组件" class="headerlink" title="受控组件"></a>受控组件</h3><p>HTML中的表单元素是可以用户自己输入的，如text，也就是説有自己的<strong>可变状态</strong>，但在React中可变状态是<strong>保存在state</strong>中的，且只能用setState()也改变，这就与HTML有了冲突，因此出现了受控组件，即</p><p><em>其值由React控制的表单元素</em>。</p><h3 id="受控组件的使用"><a href="#受控组件的使用" class="headerlink" title="受控组件的使用"></a>受控组件的使用</h3><p>有关text的受控组件: text ,textarea(同text), select(同上)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">state = &#123;</span><br><span class="line">txt: &#x27;&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handleChange = (e) =&gt; &#123;// 使用事件对象，可以去掉（）</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">    txt: e.target.value// 获得text的最新值</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render()&#123;</span><br><span class="line">return(</span><br><span class="line">    &lt;input type=&quot;text&quot; value=&#123;this.state.txt&#125; onChange=&#123;this.handleChange&#125;/&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有关单击选择的受控组件：复选框一类（与text 类有一点不同是改的checked属性）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 省略</span><br><span class="line">handleChecked = e =&gt; &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">        isChecked: e.target.checked</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; checked=&#123;this.state.isChecked&#125; onChange=&#123;this.handleChecked&#125;/&gt;</span><br></pre></td></tr></table></figure><h3 id="多表单元素的优化"><a href="#多表单元素的优化" class="headerlink" title="多表单元素的优化"></a>多表单元素的优化</h3><p>因为给每个受控组件添加事件处理十分繁琐，所以我们的代码需要优化</p><p>使用<strong>name属性</strong>优化代码：第一给元素添加name可以用来区别我们的表单元素，第二我们给name起与state一样的名字用来之后方便更新state。（本质与class的作用差不多）</p><h4 id="判断-元素类型"><a href="#判断-元素类型" class="headerlink" title="判断 元素类型"></a>判断 元素类型</h4><p>我们可以使用三元来判断元素为什么类型</p><p>例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let value = targe.type === &#x27;checkbox&#x27; ? target.checked : target.value</span><br><span class="line"></span><br><span class="line">// 设置对应的state</span><br><span class="line">this.setState(&#123;</span><br><span class="line">    [name]: value // es6语法，动态得到当时操作的元素名字</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>实际操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">state = &#123;</span><br><span class="line">    txt: &#x27;&#x27;</span><br><span class="line">    isChecked: &#x27;&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handleForm = e =&gt; &#123;</span><br><span class="line">// 获得当前DOM对象</span><br><span class="line">    const targe = e.target</span><br><span class="line">    // 根据类型取值</span><br><span class="line">    const value = targe.type === &#x27;checkbox&#x27; ? target.checked : target.value</span><br><span class="line">    //  获取name</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">        [name]: value</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render()&#123;</span><br><span class="line">return(</span><br><span class="line">        // 为每个元素设置name属性</span><br><span class="line">    &lt;input name = &quot;txt&quot; type=&quot;text&quot; value=&#123;this.state.txt&#125; onChange=&#123;this.handleForm&#125;/&gt;</span><br><span class="line">    &lt;input name=&quot;isCheck&quot; type=&quot;checkbox&quot; value=&#123;this.state.isCheck&#125; onChange=&#123;this.handleForm&#125;/&gt; //使用同样的事件处理程序</span><br><span class="line"> ......</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="非受控组件-不常用，不推荐"><a href="#非受控组件-不常用，不推荐" class="headerlink" title="非受控组件 (不常用，不推荐)"></a>非受控组件 (不常用，不推荐)</h3><p>我们需要借助ref(作用：获取DOm或组件) ，使用原生DOM来得到元素值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">constructor()&#123;</span><br><span class="line">super()</span><br><span class="line">    this.txtRef = React.createRef()// 建立Ref对象</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getTxt = ()&#123;</span><br><span class="line">console.log(&#x27;text:&#x27;, this.txtRef.current.value) //原生DOM的值得到方式</span><br><span class="line">    render()&#123;</span><br><span class="line">retrurn(</span><br><span class="line">        &lt;input type=&quot;text&quot; ref=&#123;this.txtRef&#125;/&gt; //绑定Ref</span><br><span class="line">            &lt;button onClick=&#123;this.getTxt&#125;&gt;...&lt;/button&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="组件通讯"><a href="#组件通讯" class="headerlink" title="组件通讯"></a>组件通讯</h2><p>​        <strong>组件</strong>通常是独立的个体，组件之间互不影响，但我们在利用组件实现功能时不可避免用共享某些数据 ，为了更好的实现这些功能，我们需要<strong>组件通讯</strong>。</p><h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><p>​        什么是<strong>props</strong>, 就是接收传递给组件的数据 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 传递数据： 给组件标签**添加属性**(如&lt;hello name=&quot;rose&quot; age=&#123;20&#125;/&gt; // 非字符要加&#123;&#125;)</span><br><span class="line">2.  接收数据 ： &lt;u&gt;函数组件&lt;/u&gt;通过**参数props**接收数据 ，&lt;u&gt;类组件&lt;/u&gt;通过**this.props**接收数据 。</span><br></pre></td></tr></table></figure><p>特点：</p><ol><li>可以传递任意数据 类型（也可以是<strong>jsx</strong>）</li><li>props是<strong>只读</strong>的，不可修改数据 。</li><li>使用类组件时，如果写了<strong>构造函数</strong>（constructor）,要将props传递给super()，否则我们无法在构造函数内使用使用props（类组件的别的位置不影响）。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Hooo extends React.Component &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props)// 有构造函数时推荐</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组件通讯的三种方式"><a href="#组件通讯的三种方式" class="headerlink" title="组件通讯的三种方式"></a>组件通讯的三种方式</h3><ol><li>父组件 -&gt;子组件</li><li>子组件 -&gt; 父组件</li><li>兄弟组件之间互相</li></ol><h4 id="父组件传递给子组件"><a href="#父组件传递给子组件" class="headerlink" title="父组件传递给子组件"></a>父组件传递给子组件</h4><p>父：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Parent extends React.Component &#123;</span><br><span class="line">    state = &#123;lastName: &#x27;杨&#x27;&#125;// 提供数据 </span><br><span class="line">render()&#123;</span><br><span class="line">        return (</span><br><span class="line">        &lt;div&gt; &lt;Child name=&#123;this.state.lastName&#125; /&gt;     &lt;/div&gt; // 添加属性</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function Child(props) &#123;</span><br><span class="line">    return &lt;div&gt;&#123; props.name&#125;&lt;/div&gt;  // 子组件通过props接收父组件的数据 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="子组件传递数据给父组件（利用回调函数）"><a href="#子组件传递数据给父组件（利用回调函数）" class="headerlink" title="子组件传递数据给父组件（利用回调函数）"></a>子组件传递数据给父组件（利用回调函数）</h4><p>父组件提供一个<strong>回调函数</strong>（接收方提供）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Parent extends React.Component &#123;</span><br><span class="line">getChildMsg = (data) =&gt; &#123;// 父提供回调</span><br><span class="line">        console.log(data)        </span><br><span class="line">    &#125;</span><br><span class="line">render()&#123;</span><br><span class="line">        return (</span><br><span class="line">        &lt;div&gt; &lt;Child  getMsg=&#123;this.getChildMsg&#125; /&gt;     &lt;/div&gt;  // 子调用回调</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当父方想要显示接收的数据时，父可以设置自己的state，再用data更新。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//  子组件 </span><br><span class="line">class Child extends React.Component &#123;</span><br><span class="line">state =&#123;</span><br><span class="line">        msg: &#x27;刷抖音&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">handleChlick = () =&gt; &#123;</span><br><span class="line">        // 子组件调用父组件传递的回调函数</span><br><span class="line">        this.props.getMsg( this.state.msg)</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">        &lt;div&gt;子： &lt;button onClick = &#123;this.handleClick&#125;&gt;点我一下&lt;/button&gt;&lt;/div&gt; // 通过点击 调用</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意： 回调函数有<strong>this指向问题</strong>。（当前写法来不用考虑）</p><h4 id="兄弟组件"><a href="#兄弟组件" class="headerlink" title="兄弟组件"></a>兄弟组件</h4><p>​    我们需要为两个没有上下关系的组件提供一块共享空间用于分享数据，将<strong>共享状态</strong>提升到最近的<strong>公共父组件</strong>中，由公共父组件管理，这被称为<strong>状态提升</strong>。</p><p>例如实现计数功能：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">class Counter extends React.Component&#123;</span><br><span class="line">    state = &#123;// 提供共享状态</span><br><span class="line">        count: 0</span><br><span class="line">    &#125;</span><br><span class="line">// 提供修改状态的方法</span><br><span class="line">onIncrement = () =&gt; &#123;</span><br><span class="line">    this.setState (&#123;</span><br><span class="line">        count: this.state.count +1</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">render()&#123;</span><br><span class="line">        return(</span><br><span class="line">                // 添加属性</span><br><span class="line">                // 使用方法（作为属性传递给子组件）</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                    &lt;Child1  count=&#123;this.state.count&#125;/&gt;</span><br><span class="line">                    &lt;Child2  onIncrement=&#123;this.onIncrement&#125;/&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 子 组件 </span><br><span class="line">const Child1 = ( props) =&gt; &#123;</span><br><span class="line">    return (&lt;h1&gt;计数器：&#123;props.count&#125;&lt;/h1&gt;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const Child2 = (props) =&gt; &#123;</span><br><span class="line">    return (&lt;button onClick=&#123;() =&gt; props.onIncrement()&#125;&gt;+1&lt;/button&gt;)// 事件调用方法</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;Counter /&gt;, document.getElementById(&#x27;boot&#x27;))</span><br></pre></td></tr></table></figure><h3 id="props深入"><a href="#props深入" class="headerlink" title="props深入"></a>props深入</h3><h4 id="children属性"><a href="#children属性" class="headerlink" title="children属性"></a>children属性</h4><p>​    当我们的节点有子节点时，props会自动添加children属性（即子节点本身）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const App = props =&gt;&#123;</span><br><span class="line">    return (</span><br><span class="line">    &lt;div&gt;&#123;props.children&#125;&lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;app&gt;我是子节点&lt;/app&gt;, document,getElementById(&#x27;root&#x27;))// 使用双标签包裹时里面的内容为子节点内容，可以是组件，元素等</span><br></pre></td></tr></table></figure><h4 id="props校验"><a href="#props校验" class="headerlink" title="props校验"></a>props校验</h4><p>对于组件来说，我们无法保证组件的使用者传入什么类型的数据给组件，传入的格式不对，就可能导致组件的报错，但使用者又不知道具体是哪里出错了，所以我们就要用到<strong>props校验</strong>(允许在指定props的类型与格式)。</p><p>常见类型： <strong>array,bool,func,number,object,string.</strong></p><p>也可以传入元素，PropTypes.<strong>element</strong></p><p>如果需要要求一定传入，可以加必填项：<strong>isRequired</strong>(在类型的后面加.isRequired)</p><p>如果要传入对象，可以用特定结构对象shape({})来约束对象内属性的类型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">objectName: PropTypes.shape(&#123;</span><br><span class="line">    color: PropsTypes.string,</span><br><span class="line">    fontSize: PropTypes.number</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">App.propTypes = &#123;</span><br><span class="line">    colors: PropTypes.array</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>出错时，会给出明确的错误提示，易于发现。</p><p>使用步骤：</p><h5 id="安装prop-types"><a href="#安装prop-types" class="headerlink" title="安装prop-types"></a>安装prop-types</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add prop-types/npm i props-types</span><br></pre></td></tr></table></figure><h5 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import PropTypes from &#x27;frop-types&#x27;</span><br></pre></td></tr></table></figure><p>使用组件名.propTypes = {}来给组件添加校验规则</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import PropTypes from &#x27;frop-types&#x27;</span><br><span class="line">function App (props) &#123;</span><br><span class="line">    return (</span><br><span class="line">    &lt;h1&gt;Hoooo,&#123;props.name&#125;&lt;/h1&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line">App.propTypes = &#123;</span><br><span class="line">    name:  PropTypes.array // 约定name为array类型</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="context"><a href="#context" class="headerlink" title="context"></a>context</h3><p>我们知道组件之间传递数据要用到props但当一个父组件有好几层子组件时，我们就要一层层向下传递数据 ，这时props就十分繁锁了，<strong>context</strong>（作用：跨组件 传递数据）就是用于解决这一问题。</p><p>一， 调用<em>React.createContext()</em> 创建<strong>Provide</strong>(提供数据)和<strong>Consumer</strong>(消费数据)两个组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const &#123;Provider,Consumer&#125; = React.createContext()</span><br></pre></td></tr></table></figure><p>二， 使用Provider组件作为父节点（用Provider包裹）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Provider&gt;</span><br><span class="line">&lt;div className=&quot;App&quot;&gt;</span><br><span class="line">    &lt;Child /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/Provider&gt;</span><br></pre></td></tr></table></figure><p>三， 设置value属性，表示要传递的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Provider value=&quot;pink&quot;&gt;</span><br></pre></td></tr></table></figure><p>四， 调用Consumer组件接收数据(使用回调函数)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Consumer&gt;</span><br><span class="line">&#123;data =&gt; &lt;span&gt;data接收到的数据&#123;data&#125;&lt;/span&gt;&#125;</span><br><span class="line">&lt;/Consumer&gt;</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">const &#123;Provider, Consumer &#125; = React.creatContext()</span><br><span class="line">// 第一层父节点</span><br><span class="line">class App extends React.Component&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        return(</span><br><span class="line">            // 用Provider包裹</span><br><span class="line">            &lt;Provider value=&quot;pink&quot;&gt;</span><br><span class="line">                    &lt;div&gt;&lt;node /&gt;&lt;/div&gt;</span><br><span class="line">            &lt;/Provider&gt;</span><br><span class="line"></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 第二层子节点</span><br><span class="line">const Node = props =&gt; &#123;</span><br><span class="line">    return(</span><br><span class="line">    &lt;div className=&quot;node&quot;&gt;&lt;SubNode /&gt;&lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 第三层</span><br><span class="line">const SubNode = props =&gt; &#123;</span><br><span class="line">    return (</span><br><span class="line">    &lt;div className=&quot;subnode&quot;&gt;&lt;Chlid /&gt;&lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 最后一层</span><br><span class="line">const Child = props =&gt; &#123;</span><br><span class="line">    return &lt;div className=&quot;child&quot;&gt;</span><br><span class="line">       &lt;Consumer&gt;</span><br><span class="line">        &#123;data =&gt; &lt;span&gt;我是子节点&#123;data&#125;&lt;/span&gt; &#125;</span><br><span class="line">        &lt;/Consumer&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;App /&gt;, document.getElementById(&#x27;root&#x27;))</span><br></pre></td></tr></table></figure><h2 id="组件的生命周期（类组件才有）"><a href="#组件的生命周期（类组件才有）" class="headerlink" title="组件的生命周期（类组件才有）"></a>组件的生命周期（类组件才有）</h2><p>​        一个组件从<em>创建到被 卸载的过程</em>，我们称之为一个组件的<strong>生命周期</strong>，我们为什么要学习它呢？</p><p>​        因为了解组件的生命周期有助于我们更深刻认识组件的运行方式，让我们可以实现更<em>复杂的功能</em>。</p><p><strong>钩子函数</strong>：生命周期每个阶段伴随着的方法（为了操作组件）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;函数与方法的分别在于方法后面有&lt;strong&gt;（）&lt;/strong&gt;，函数 没有。&lt;/p&gt;
&lt;h1 id=&quot;React&quot;&gt;&lt;a href=&quot;#React&quot; class=&quot;headerlink&quot; title=&quot;React&quot;&gt;&lt;/a&gt;React&lt;/h1&gt;&lt;p&gt;​        </summary>
      
    
    
    
    <category term="Web" scheme="http://crosscloudmoon.github.io/categories/Web/"/>
    
    <category term="Node" scheme="http://crosscloudmoon.github.io/categories/Web/Node/"/>
    
    
    <category term="Node" scheme="http://crosscloudmoon.github.io/tags/Node/"/>
    
    <category term="React" scheme="http://crosscloudmoon.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Linux</title>
    <link href="http://crosscloudmoon.github.io/2021/07/05/Linux/"/>
    <id>http://crosscloudmoon.github.io/2021/07/05/Linux/</id>
    <published>2021-07-05T10:39:22.000Z</published>
    <updated>2021-07-05T11:43:16.231Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><p>内核版本： 操作系统的核心</p><p>发行版本： 皮肤</p><p>​                    Ubuntu Redhat CentOS…</p><h2 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h2><p>Ubuntu Desttop： 可视界面</p><p>Ubuntu Server: 没有图形界面，纯命令行界面</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>date     显示 日期</p><p>exit    退出</p><p>clear －清空屏幕</p><p>reset    重新初始化终端，清屏</p><p>history －显示历史列表内容</p><p>touch     新建文件</p><p>help    查看帮助</p><h3 id="文件系统中跳转"><a href="#文件系统中跳转" class="headerlink" title="文件系统中跳转"></a>文件系统中跳转</h3><p>我们需要学习的第一件事（除了打字之外）是如何在 Linux 文件系统中跳转。在这一章节中，</p><p>我们将介绍以下命令：</p><p>pwd —打印出当前工作目录名</p><p>cd —更改目录</p><p>ls —列出目录内容</p><p>使用 ls 命令的“-l”选项，则结果以长模式输出(ll)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：除了当前工作目录以外，也可以指定别的目录: ls /another</p><h3 id="有用的快捷键"><a href="#有用的快捷键" class="headerlink" title="有用的快捷键"></a>有用的快捷键</h3><p>cd 更改工作目录到你的家目录。</p><p>cd -更改工作目录到先前的工作目录。</p><h4 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h4><p>shell</p><p>能帮助你的另一种方式是通过一种叫做自动补全的机制。当你敲入一个命令时，按下 tab</p><p>键，自动补全就会发生。</p><h3 id="指定"><a href="#指定" class="headerlink" title="指定"></a>指定</h3><p>大多数命令使用的选项，是由一个中划线加上一个字符组成，例如，“-l”，但是许多命令，</p><p>包括来自于 GNU 项目的命令，也支持长选项，长选项由两个中划线加上一个字组成。当然，</p><p>许多命令也允许把多个短选项串在一起使用。下面这个例子，ls 命令有两个选项，“l”选项产</p><p>生长格式输出，“t”选项按文件修改时间的先后来排序。</p><p>-a –all</p><p>列出所有文件，甚至包括文件名以圆点开头的默认会</p><p>被隐藏的隐藏文件。</p><p>-l</p><p>以长格式显示结果。</p><p>-r –reverse</p><p>以相反的顺序来显示结果。通常，ls 命令的输出结果</p><p>按照字母升序排列。</p><p>-S</p><p>命令输出结果按照文件大小来排序。</p><p>-t</p><p>按照修改时间来排序</p><h3 id="操作文件"><a href="#操作文件" class="headerlink" title="操作文件"></a>操作文件</h3><p>cp —复制文件和目录</p><p>mv —移动/重命名文件和目录</p><p>mkdir —创建目录</p><p>rm —删除文件和目录</p><p>ln —创建硬链接和符号链接</p><p>这五个命令属于最常使用的 Linux 命令之列。它们用来操作文件和目录</p><p>会创建一个名为 “dir1” 的目录，而</p><p>mkdir dir1 dir2 dir3</p><p>会创建三个目录，名为 dir1, dir2, dir3。</p><h3 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h3><p>下表列出了移动光标所使用的按键：</p><p>Ctrl-a     移动光标到行首。</p><p>Ctrl-e    移动光标到行尾。</p><p>Ctrl-f     光标前移一个字符；和右箭头作用一样。</p><p>Ctrl-b     光标后移一个字符；和左箭头作用一样。</p><p>Alt-f     光标前移一个字。</p><p>Alt-b     光标后移一个字。</p><p>Ctrl-l     清空屏幕，移动光标到左上角。clear 命令完成同样的工作。</p><h3 id="修改文本"><a href="#修改文本" class="headerlink" title="修改文本"></a>修改文本</h3><p>Ctrl-d     删除光标位置的字符。</p><p>Ctrl-t     标位置的字符和光标前面的字符互换位置。</p><p>Alt-t     光标位置的字和其前面的字互换位置。</p><p>Alt-l     把从光标位置到字尾的字符转换成小写字母。</p><p>Alt-u     把从光标位置到字尾的字符转换成大写字母。</p><h3 id="文本编辑命令"><a href="#文本编辑命令" class="headerlink" title="文本编辑命令"></a>文本编辑命令</h3><h4 id="剪切和粘贴文本"><a href="#剪切和粘贴文本" class="headerlink" title="剪切和粘贴文本"></a>剪切和粘贴文本</h4><p>Ctrl-k     剪切从光标位置到行尾的文本。</p><p>Ctrl-u     剪切从光标位置到行首的文本。</p><p>Alt-d     剪切从光标位置到词尾的文本。</p><p>Alt-Backspace        剪切从光标位置到词头的文本。如果光标在一个单词的开</p><p>头，剪切前一个单词。</p><p>Ctrl-y     把剪切环中的文本粘贴到光标位置。</p><h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><p>id –显示用户身份号</p><p>chmod –更改文件模式</p><p>umask –设置默认的文件权限</p><p>su –以另一个用户的身份来运行 shell</p><p>sudo –以另一个用户的身份来执行命令</p><p>chown –更改文件所有者</p><p>chgrp –更改文件组所有权</p><p>passwd –更改用户密码</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux&quot;&gt;&lt;a href=&quot;#Linux&quot; class=&quot;headerlink&quot; title=&quot;Linux&quot;&gt;&lt;/a&gt;Linux&lt;/h1&gt;&lt;p&gt;内核版本： 操作系统的核心&lt;/p&gt;
&lt;p&gt;发行版本： 皮肤&lt;/p&gt;
&lt;p&gt;​                    </summary>
      
    
    
    
    <category term="Web" scheme="http://crosscloudmoon.github.io/categories/Web/"/>
    
    <category term="Node" scheme="http://crosscloudmoon.github.io/categories/Web/Node/"/>
    
    
    <category term="Node" scheme="http://crosscloudmoon.github.io/tags/Node/"/>
    
    <category term="Linux" scheme="http://crosscloudmoon.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrap</title>
    <link href="http://crosscloudmoon.github.io/2021/06/22/Bootstrap/"/>
    <id>http://crosscloudmoon.github.io/2021/06/22/Bootstrap/</id>
    <published>2021-06-22T06:11:13.000Z</published>
    <updated>2021-07-05T11:49:18.568Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h1><br><h2 id="1-安装与使用"><a href="#1-安装与使用" class="headerlink" title="1.安装与使用"></a>1.安装与使用</h2><p><a href="https://www.bootcss.com/">中文网  https://www.bootcss.com/</a></p><p>我们这里使用Bootstrap3</p><p><br><br><br></p><p><code>特点</code>： </p><ol><li>简洁，直观 ，强悍的前端开发框架</li><li>响应式设计，12列网格。</li><li>Bootstrap3基于Less,Bootstrap4 基于Sassc预处理技术。</li><li>丰富的组件提供</li></ol><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>下载： <a href="https://v3.bootcss.com/getting-started/#download">https://v3.bootcss.com/getting-started/#download</a></p><br><p><code>生产版本</code>：可以用于快速开发，功能少</p><p><code>源码</code>： 用于学习，功能全（我们下这个）</p><p>之后需要把dist/css/bootstrap.min.css文件引入到css中(min就是压缩版，上线时代码会压缩在一起，体积小，如想看源码可以使用没有min的)</p><p>dist/js/bootstrap.min.js文件引入到js中</p><p><code>下载后的文件我们不是都会使用，可以只把dist文件夹拷贝到我们的项目下</code></p><p>如果需要使用组件还需要下载jquery.js</p><p><strong>注意：</strong> 引入时要先引入 jquery，虽然bootstrap是依靠于jquery.</p><p><br><br><br><br><br><br></p><h2 id="2-布局容器与栅格网络系统"><a href="#2-布局容器与栅格网络系统" class="headerlink" title="2.布局容器与栅格网络系统"></a>2.布局容器与栅格网络系统</h2><p>bootstarp提供了两种布局</p><ol><li>​    .container类,固定宽度，两边有留白的响应式布局容器（<code>推荐</code>）</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><br><ol start="2"><li>​    .container-fluid类，100%宽度，全屏幕式布局（不常用）</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br><br><br><br></p><h3 id="栅格网络系统"><a href="#栅格网络系统" class="headerlink" title="栅格网络系统"></a>栅格网络系统</h3><p>Bootstrap提供了一套<code>响应式，移动设备优先的流式栅格系统</code>，随着<em>屏幕或视口</em>的尺寸的变化 ，系统自动分为<strong>12列</strong>。栅格系统通过<code>行（row）列（column)</code>的组合来创建页面布局，你的内容就可以放入这些创建的布局中。</p><p>原理说白了就是，把页面分为12份（通常是，也可以分为32或24），我们通过决定每个容器占有几份来控制我们的页面。</p><p><code>屏幕尺寸</code>：</p><p>xs: 超小屏（自动）</p><p>sm: 小屏（750px）</p><p>md: 中屏(970px)</p><p>lg: 大屏(1170px)</p><p><strong>注意：</strong>数据行（.row）一定要放在容器（.container）中，以便为其合适的对齐方式和内距（padding）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Bootstrap&quot;&gt;&lt;a href=&quot;#Bootstrap&quot; class=&quot;headerlink&quot; title=&quot;Bootstrap&quot;&gt;&lt;/a&gt;Bootstrap&lt;/h1&gt;&lt;br&gt;

&lt;h2 id=&quot;1-安装与使用&quot;&gt;&lt;a href=&quot;#1-安装与使用&quot; cla</summary>
      
    
    
    
    <category term="Web" scheme="http://crosscloudmoon.github.io/categories/Web/"/>
    
    <category term="Note" scheme="http://crosscloudmoon.github.io/categories/Web/Note/"/>
    
    
    <category term="Bootstrap" scheme="http://crosscloudmoon.github.io/tags/Bootstrap/"/>
    
    <category term="Note" scheme="http://crosscloudmoon.github.io/tags/Note/"/>
    
  </entry>
  
  <entry>
    <title>Computer specialty</title>
    <link href="http://crosscloudmoon.github.io/2021/06/22/Computer-specialty/"/>
    <id>http://crosscloudmoon.github.io/2021/06/22/Computer-specialty/</id>
    <published>2021-06-22T03:30:16.000Z</published>
    <updated>2021-06-22T06:29:57.705Z</updated>
    
    <content type="html"><![CDATA[<p>#正确拼写<br>##后端</p><ul><li>Java</li><li>Linux</li><li>MySQL</li><li>Redis</li><li>更新中…<br><br><br><br><br>##前端</li><li>Web</li><li>HTTP</li><li>HTML</li><li>CSS</li><li>JavaScript</li><li>jQuery</li><li>Node.js</li><li>Bootstrap</li><li>Less</li><li>Vue.js</li><li>更新中…</li></ul><br><br><br><br><br><br>##客户端开发- App- Android- iOS- iPhone- App Store- 更新中...<br><br><br><br><br>##SKILL- Git- Eclipse- VS Code/VSC]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;#正确拼写&lt;br&gt;##后端&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;Linux&lt;/li&gt;
&lt;li&gt;MySQL&lt;/li&gt;
&lt;li&gt;Redis&lt;/li&gt;
&lt;li&gt;更新中…&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
##前端&lt;/li&gt;
&lt;li&gt;Web&lt;/li&gt;</summary>
      
    
    
    
    
    <category term="Node" scheme="http://crosscloudmoon.github.io/tags/Node/"/>
    
    <category term="Web" scheme="http://crosscloudmoon.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>学会使用Less，工作效率UP|笔记|教程|</title>
    <link href="http://crosscloudmoon.github.io/2021/06/22/Less/"/>
    <id>http://crosscloudmoon.github.io/2021/06/22/Less/</id>
    <published>2021-06-22T02:05:56.000Z</published>
    <updated>2021-06-22T03:08:34.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学会使用Less，工作效率UP-笔记-教程"><a href="#学会使用Less，工作效率UP-笔记-教程" class="headerlink" title="学会使用Less，工作效率UP|笔记|教程|"></a>学会使用Less，工作效率UP|笔记|教程|</h1><br><p>​    Less是一门<code>CSS预处理语言</code>,它<em>基于Node</em>,它扩展了CSS语言，增加了功能，使写CSS更加方便，结构更加清晰。</p><p>​    <strong>功能</strong>： 变量，嵌套，伪类，伪元素，媒体查询。</p><br><br><br><h2 id="Less里的注释"><a href="#Less里的注释" class="headerlink" title="Less里的注释"></a>Less里的注释</h2><p>以**//开头**的注释，不会被编译到CSS里</p><p>以**/* */包裹**的注释会被编译到CSS里</p><p><br><br><br><br><br></p><h2 id="使用Less的方式"><a href="#使用Less的方式" class="headerlink" title="使用Less的方式"></a>使用Less的方式</h2><ol><li><p><code>使用npm安装</code>/命令行用法</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g less</span><br></pre></td></tr></table></figure></li><li><p><code>引入式</code>/浏览器端用法（引入文件不符合预编辑的理念，不推荐）</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;less.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>编辑器插件</code>（<strong>推荐</strong>）</p><p> VScode里的 Easy LESS插件（保存Less时自动生成CSS文件）</p><p> <strong>注意</strong>：要在HTML里引入 自动生成的CSS文件。</p></li><li><p>在项目中使用打包工具（webpack,gulp）</p></li></ol><p><br><br><br><br><br></p><h2 id="Less功能"><a href="#Less功能" class="headerlink" title="Less功能"></a>Less功能</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 布局</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br><br>### 1.变量</p><br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把常用的颜色，大小等设为变量，统一修改，我们就可以快速改变页面的主题，风格。</span></span><br><span class="line"><span class="variable">@width:</span> <span class="number">200px</span>;</span><br><span class="line"><span class="variable">@color:</span> lightblue;</span><br><span class="line"><span class="variable">@m:</span> margin;</span><br><span class="line"><span class="variable">@selector:</span> footer;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">@width</span>; </span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="variable">@color</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">@&#123;selector&#125;</span>&#123;<span class="comment">// 把选择器与属性设为变量时要用&#123;&#125;包裹</span></span><br><span class="line">    @&#123;m&#125;: <span class="selector-tag">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p>作为URL: @{url}</p><p><strong>注意</strong>： Less里的变量均为块级作用域</p><p><br><br><br><br> </p><h4 id="Less变量的延迟加载问题"><a href="#Less变量的延迟加载问题" class="headerlink" title="Less变量的延迟加载问题"></a>Less变量的延迟加载问题</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@var:</span> <span class="number">0</span>;</span><br><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">    <span class="variable">@var:</span> <span class="number">1</span>;</span><br><span class="line">    <span class="selector-class">.brass</span> &#123;</span><br><span class="line">        <span class="variable">@var:</span> <span class="number">2</span>;</span><br><span class="line">        three: @var;<span class="comment">//3</span></span><br><span class="line">        <span class="variable">@var:</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    one: @var;<span class="comment">// 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Less会把一个块的内容全部加载后，赋值。</code></p><p><br><br><br><br><br><br></p><h3 id="2-嵌套"><a href="#2-嵌套" class="headerlink" title="2.嵌套"></a>2.嵌套</h3><br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">header</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="selector-tag">header</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>:  pink;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br><br><br></p><h3 id="3-伪类"><a href="#3-伪类" class="headerlink" title="3.伪类"></a>3.伪类</h3><br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">section</span>&#123;    <span class="attribute">height</span>: <span class="number">200px</span>;    <span class="attribute">width</span>: <span class="number">200px</span>;    <span class="attribute">background</span>: lightblue;    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span>&#123;<span class="comment">// 伪元素     &amp;为父选择器（指section）        background: lightyellow;    &#125;    &amp;::before&#123;// 伪类        content: &#x27;&#x27;;            &#125;    &amp;:nth-child(2)&#123;// 平级        width: 50px;        height: 50px;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><p><br><br><br><br><br></p><h3 id="4-媒体查询"><a href="#4-媒体查询" class="headerlink" title="4.媒体查询"></a>4.媒体查询</h3><br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;    <span class="selector-tag">header</span>&#123;        <span class="attribute">color</span>: ;    &#125;    <span class="selector-tag">section</span>&#123;    <span class="attribute">height</span>: <span class="number">200px</span>;    <span class="attribute">width</span>: <span class="number">200px</span>;    <span class="attribute">background</span>: lightblue;        <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">500px</span>)&#123;            <span class="attribute">background</span>: grey;        &#125;&#125;&#125;</span><br></pre></td></tr></table></figure><br><p><br><br><br><br></p><h3 id="5-混合（mix-in-）"><a href="#5-混合（mix-in-）" class="headerlink" title="5.混合（mix in ）"></a>5.混合（mix in ）</h3><p>当界面的结构不再单一，我们就可能会用到<code>混合模式</code>（冗余代码抽离出来）</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不带（）就是普通的混合会被编译到CSS里.pinkthem()&#123;// 抽离出代码，减少冗余    width: 200px;    height: 200px;    color: pink;    &#125;.container&#123;    header&#123;        .pinktheme()；//括号一定要有，防止被css编译到代码内。    &#125;    footer&#123;        .pinktheme()；    &#125;    &#125;</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>用法上和函数相似，但本质 不是函数。</p><p><br><br><br><br></p><h4 id="5-1带参数的混合"><a href="#5-1带参数的混合" class="headerlink" title="5.1带参数的混合"></a>5.1带参数的混合</h4><p>虽然代码冗余减少了，但有时可能不想全部应用，这种混合就少了一点灵活性，这时候就要用参数来控制 。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.pinktheme</span>(<span class="variable">@w</span>,<span class="variable">@h</span>,<span class="variable">@c</span>)&#123;    <span class="attribute">width</span>: <span class="variable">@w</span>;    <span class="attribute">height</span>: <span class="variable">@h</span>;    <span class="attribute">color</span>: <span class="variable">@c</span>&#125;<span class="selector-class">.container</span>&#123;    <span class="selector-tag">header</span>&#123;        <span class="selector-class">.pinktheme</span>(<span class="number">200px</span>,<span class="number">300px</span>, pink)；<span class="comment">// 传参    &#125;    footer&#123;        .pinktheme(100px, 200px, lightpink)；    &#125;    &#125;</span></span><br></pre></td></tr></table></figure><br><p>传的参数个数要求一一对应的，不可少参，但是我们可以使用默认值来避免传参，只在特别修改的地方修改参数。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.pinktheme</span>(<span class="variable">@w</span>:<span class="number">200px</span>,<span class="variable">@h</span>:<span class="number">200px</span>,<span class="variable">@c</span>:pink)&#123;    <span class="attribute">width</span>: <span class="variable">@w</span>;    <span class="attribute">height</span>: <span class="variable">@h</span>;    <span class="attribute">color</span>: <span class="variable">@c</span>&#125;<span class="selector-class">.container</span>&#123;    <span class="selector-tag">footer</span>&#123;        <span class="selector-class">.pinktheme</span>(<span class="number">100px</span>)；<span class="comment">// 只修改宽度，别的默认    &#125;    header&#123;        .pinktheme(@c:pink)；// 命名参数    &#125;&#125;</span></span><br></pre></td></tr></table></figure><p><br><br><br><br><br></p><h4 id="5-2匹配模式"><a href="#5-2匹配模式" class="headerlink" title="5.2匹配模式"></a>5.2匹配模式</h4><p>之前我们学过把代码抽离出去，到了后期抽离的代码块越来越多，就会影响我们less编写，所以我们没抽离出的代码一起放在<strong>别的less</strong>文件。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建的名叫themes的less文件.pinktheme(P1,@w:200px,@h:200px,@c:pink)&#123;// P1就是模式    width: @w;    height: @h;    color: @c&#125;</span></span><br></pre></td></tr></table></figure><br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原文件@import &quot;themes&quot;;// import引入文件，注意有分号        .container&#123;    footer&#123;        .pinktheme(P1,100px)；// 如果我们pinktheme有多个版本就可以选择模式    &#125;&#125;</span></span><br></pre></td></tr></table></figure><p>这种写法适用于多个代码块有大部分冗余，我们每次只修改一两个属性，如我们在界面上画图形每个代码块只有三个形的方向的代码不同，我们建立不同模式，再把每个模式内相同的代码再一次抽离出去，实现减少冗余 。</p><p>例如：我们有两个pinktheme模式但我们只是颜色上有一点 不同。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// themes文件.wh(@w:200px,@h:200px)&#123;// 再抽离    width: @w;    height: @h;&#125;.pinktheme(P1,@c:pink)&#123;// P1模式.wh();    color: @c;&#125;.pinktheme(P2,@c:lightpink&#123;// P2模式 只有color不一样.wh();    color: @c;&#125;// 原文件@import &quot;themes&quot;;        .container&#123;    footer&#123;        .pinktheme(P1)；     header&#123;        .pinktheme(P2)；    &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><p>如果我们不用匹配模式，用不同的代码块抽离，就会多出不少相似的代码块（.pinktheme,.lightpinktheme）。</p><p>在调用上还可以写成这种</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// themes文件.pinktheme(@w:200px,@h:200px)&#123;// 使用同名    width: @w;    height: @h;&#125;.pinktheme(P1,@c:pink)&#123;// P1模式    color: @c&#125;.pinktheme(P2,@c:lightpink&#123;// P2模式 只有color不一样    color: @c&#125;// 原文件@import &quot;themes&quot;;        .container&#123;    footer&#123;        .pinktheme();// 这种上面代码是减少，但要调用两个，写法随自己喜好了这个。          .pinktheme(P1)；     header&#123;         .pinktheme();        .pinktheme(P2)；    &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><p><code>最终进阶</code>:调用两次是不是还有有个麻烦，还可以优化</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// themes文件.pinktheme(@_)&#123;// 使用@_,每次调用时自动执行    width: 200px;    height: 200px;&#125;.pinktheme(P1,@c:pink)&#123;    color: @c&#125;.pinktheme(P2,@c:lightpink&#123;    color: @c&#125;// 原文件@import &quot;themes&quot;;        .container&#123;    footer&#123;         .pinktheme(P1)；//  只调用一次     header&#123;        .pinktheme(P2)；    &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><p><br><br><br><br><br><br></p><h4 id="5-3arguments变量（非重点）"><a href="#5-3arguments变量（非重点）" class="headerlink" title="5.3arguments变量（非重点）"></a>5.3arguments变量（非重点）</h4><p>它是实参变量，伪数组。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.border</span>(<span class="variable">@px</span>, <span class="variable">@style</span>,<span class="variable">@color</span>)&#123;    <span class="attribute">border</span>: <span class="variable">@arguments</span>;    &#125;<span class="selector-class">.container</span>&#123;    <span class="selector-class">.border</span>(<span class="number">1px</span> , solid, black);&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;    <span class="attribute">border</span>: <span class="number">1px</span>, solid, black;&#125;</span><br></pre></td></tr></table></figure><br><p><br><br><br><br><br></p><h3 id="6-Less计算"><a href="#6-Less计算" class="headerlink" title="6.Less计算"></a>6.Less计算</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;    <span class="attribute">width</span>: (<span class="number">100</span>+<span class="number">100px</span>);<span class="comment">// 只有一个单位就可以&#125;</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>CSS里也有计算（通过cacl()计算，），但CSS内的直接计算会影响性能，建议使用less计算。</p><p><br><br><br><br><br></p><h3 id="7-继承-性能比混合高，灵活性没有混合强"><a href="#7-继承-性能比混合高，灵活性没有混合强" class="headerlink" title="7.继承(性能比混合高，灵活性没有混合强)"></a>7.继承(性能比混合高，灵活性没有混合强)</h3><p>使用混合可以大大减少我们less代码冗余，但是我们原生css内的代码量会变得冗长，这是我们不想见到的，这时混合就完成不了了，就有必要<code>了解继承</code>的用法。</p><p><code>继承不可以传参</code>。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// themes文件.pinktheme&#123;// 没有括号它就不再是混合，而是一个类名    color: pink;// 放公用的代码&#125;// 原文件@import &quot;themes&quot;;        .container&#123;        header:extend(.pinktheme)&#123;// extend()是一个函数括号内加类名            width: 200px;// 可能要改的代码    height: 200px;        &#125;&#125;// 因为extend为同级也可以写成.container&#123;        header&#123;            &amp;:extend(.pinktheme);            width: 200px;    height: 200px;        &#125;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.pinktheme</span>,<span class="selector-class">.container</span> <span class="selector-tag">header</span> &#123;  <span class="attribute">color</span>: pink;&#125;<span class="selector-class">.container</span> <span class="selector-tag">header</span> &#123;  <span class="attribute">width</span>: <span class="number">200px</span>;  <span class="attribute">height</span>: <span class="number">200px</span>;&#125;</span><br></pre></td></tr></table></figure><p>当需要继承全部状态时</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// themes.pinktheme&#123;    color: pink;    &amp;:hover&#123;// 有状态        background: grey;    &#125;&#125;// 原文件.container&#123;        header&#123;            &amp;:extend(.pinktheme all);// 全部继承            width: 200px;    height: 200px;        &#125;&#125;</span></span><br></pre></td></tr></table></figure><br><p><br><br><br><br><br></p><h3 id="8-避免编译"><a href="#8-避免编译" class="headerlink" title="8.避免编译"></a>8.避免编译</h3><p>使用**~””**,引号内包裹的less代码会被避免编译，如是计算，由浏览器计算。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;学会使用Less，工作效率UP-笔记-教程&quot;&gt;&lt;a href=&quot;#学会使用Less，工作效率UP-笔记-教程&quot; class=&quot;headerlink&quot; title=&quot;学会使用Less，工作效率UP|笔记|教程|&quot;&gt;&lt;/a&gt;学会使用Less，工作效率UP|笔记|教程|</summary>
      
    
    
    
    <category term="web前端" scheme="http://crosscloudmoon.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Node" scheme="http://crosscloudmoon.github.io/categories/web%E5%89%8D%E7%AB%AF/Node/"/>
    
    
    <category term="Less" scheme="http://crosscloudmoon.github.io/tags/Less/"/>
    
    <category term="Node" scheme="http://crosscloudmoon.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>最强的文本编辑器Vim，其实也没有怎么难！|入门教程|</title>
    <link href="http://crosscloudmoon.github.io/2021/06/22/Vim/"/>
    <id>http://crosscloudmoon.github.io/2021/06/22/Vim/</id>
    <published>2021-06-22T01:36:36.000Z</published>
    <updated>2021-06-22T02:54:09.025Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最强的文本编辑器Vim，其实也没有怎么难！-入门教程"><a href="#最强的文本编辑器Vim，其实也没有怎么难！-入门教程" class="headerlink" title="最强的文本编辑器Vim，其实也没有怎么难！|入门教程|"></a>最强的文本编辑器Vim，其实也没有怎么难！|入门教程|</h1><p>​    Vim作为一款<code>上古神器</code>，从人人鄙视到爱不释手，它有几十年的历史， 它是最强的<strong>文本编辑器</strong>,没有之一，说Vim不好用的人都是不会用Vim的人。</p><p>​    一开始可能有点难，只有自己还没有习惯它，熟练后可以让你的效率翻倍。</p><p>​    在这里我只提供一些最常用的命令，没有必要一下就把环境做的太繁杂，它有好多插件，这是你用上手了，感觉Vim的常用命令不能满足你的速度了，后后慢慢来学习进阶的命令也好，设置Vim环境也好，这都是后面的事。</p><p>​    这样想的话是不是vim也没什么难的了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim learn-vim.txt</span><br></pre></td></tr></table></figure><p><code>用vim进入文件，有的话直接进入，没有vim会自动建立。</code></p><br><h2 id="Vim模式"><a href="#Vim模式" class="headerlink" title="Vim模式"></a>Vim模式</h2><ol><li>命令模式</li><li>插入模式——输入文本</li></ol><p><strong>注意：</strong> Vim不只两种模式，但现在我们就当作有两种，以免混淆。</p><p>输入i切换为插入模式（默认状态下）</p><p>Esc键——从其它模式回到默认模式（这里当作是命令模式）</p><p><br><br><br></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h3><p>h    左</p><p>j     下</p><p>k    上</p><p>l    右</p><p>0     光标跳到当前行的行首</p><p>$    光标跳到当前行的行尾</p><p>14G     跳到14行</p><p>:14     跳到14行</p><p>gg    到文件开头</p><p>G    光标跳到文件最后一行</p><p>w    跳到下个单词开头（word）</p><p>b    跳到上个单词开头（backsapce）</p><p><br><br><br><br><br></p><h3 id="修改内容"><a href="#修改内容" class="headerlink" title="修改内容"></a>修改内容</h3><p>i    在光标所在位置前开始插入。(insert )</p><p>I    在光标行首插入</p><p>a    在光标所在位置后开始 插入。（append）</p><p>A:    在光标行末插入</p><p>o    在光标下面插入空行 (open a line)</p><p>O    在光标上面插入空行</p><p>x    删除光标所在位置一个字符</p><p><br><br><br><br><br> </p><h4 id="delete类"><a href="#delete类" class="headerlink" title="delete类"></a>delete类</h4><p>D    删除当前光标后面的内容</p><p>dd    删除当前行</p><p>dw    删除一个词(delet word)</p><p><br><br><br><br></p><h4 id="change类"><a href="#change类" class="headerlink" title="change类"></a>change类</h4><p>ci”        修改“”里的内容</p><p>ct)    删除（）里字符进行修改（change to 括号）</p><p>ciw     删除当前光标单词后进入插入模式（change inner word修改单词）</p><br><br><br><h3 id="日常操作"><a href="#日常操作" class="headerlink" title="日常操作"></a>日常操作</h3><p>y     复制当前行</p><p>p    粘贴(paste)</p><p>u    撤销，可多次</p><p>.     执行上一次命令</p><p>:g/a/s//b/g     把文件里全部的a换成b</p><p>ctrl+insert =&gt; ctrl+c</p><p>shift+insert =&gt; ctrl+v</p><p>以上两个命令在windows里通用</p><p>ctrl+u     向上翻半页（forward）</p><p>ctrl +d    向下番半页(upward)</p><p><br><br><br><br><br><br></p><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><p>/abc    在当前文件内查找“abc”</p><p>n    查找下一个</p><p>N    查找上一个</p><p>fs    在当前行查找s字符，；分号下一个</p><p><br><br><br><br></p><h4 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h4><p>:w   存盘</p><p>:wq     存盘退出 </p><p>:x     存盘退出 </p><p>:q    不存盘退出 </p><p><br><br><br></p><p><strong>注意</strong>：vim是文本编辑器，你可以用它写<strong>C/C++<strong>什么，但不推荐你用它编辑一些<u>前端类的，图片视频 什么过多</u>的项目，我就是一名前端工程师，我平时写程序 时用的还有</strong>VScode</strong>,我用vim快速编辑一些文本文件什么，你也可以在VSC里安装vim的插件让你编辑前端项目到效率更高。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;最强的文本编辑器Vim，其实也没有怎么难！-入门教程&quot;&gt;&lt;a href=&quot;#最强的文本编辑器Vim，其实也没有怎么难！-入门教程&quot; class=&quot;headerlink&quot; title=&quot;最强的文本编辑器Vim，其实也没有怎么难！|入门教程|&quot;&gt;&lt;/a&gt;最强的文本编辑</summary>
      
    
    
    
    
    <category term="Node" scheme="http://crosscloudmoon.github.io/tags/Node/"/>
    
    <category term="Vim" scheme="http://crosscloudmoon.github.io/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>如何为Typora换肤！|教程|</title>
    <link href="http://crosscloudmoon.github.io/2021/06/15/%E5%A6%82%E4%BD%95%E4%B8%BATypora%E6%8D%A2%E8%82%A4%EF%BC%81-%E6%95%99%E7%A8%8B/"/>
    <id>http://crosscloudmoon.github.io/2021/06/15/%E5%A6%82%E4%BD%95%E4%B8%BATypora%E6%8D%A2%E8%82%A4%EF%BC%81-%E6%95%99%E7%A8%8B/</id>
    <published>2021-06-15T12:24:57.000Z</published>
    <updated>2021-06-16T07:33:11.376Z</updated>
    
    <content type="html"><![CDATA[<br><br><br><h1 id="如何为Typora换肤！-教程"><a href="#如何为Typora换肤！-教程" class="headerlink" title="如何为Typora换肤！|教程|"></a>如何为Typora换肤！|教程|</h1><br><p>​    Typora是一款<strong>Markdown编辑</strong>软件，它在记笔记方面十分出众，尤其在计算机行业，深受广大编程工作人员的喜爱。但是原生的<strong>Typora皮肤</strong>在一些编程语言的代码上的显示上有一些问题，代码块与背景的颜色过于相似让人不好分别，所以就有不少换上自己喜欢的主题，官网也有提供换肤文档，但因为是外文，有些地方可能不直观，我在这里提供教程。</p><br><br><br><p>我们打开文件里的<strong>偏好设置</strong>。</p><br><p><img src="/2021/06/15/%E5%A6%82%E4%BD%95%E4%B8%BATypora%E6%8D%A2%E8%82%A4%EF%BC%81-%E6%95%99%E7%A8%8B/Snipaste_2021-06-15_20-20-27.png"></p><br><br><br><p>在这里可以获取主题，  <a href="https://theme.typora.io/">https://theme.typora.io/</a></p><br><p><img src="/2021/06/15/%E5%A6%82%E4%BD%95%E4%B8%BATypora%E6%8D%A2%E8%82%A4%EF%BC%81-%E6%95%99%E7%A8%8B/Snipaste_2021-06-15_20-19-01.png"></p><br><br><br><p>找一个自己喜欢的下载（想要更多精美主题可以自己到github上找有很多）。</p><p>就这个了。</p><br><p><img src="/2021/06/15/%E5%A6%82%E4%BD%95%E4%B8%BATypora%E6%8D%A2%E8%82%A4%EF%BC%81-%E6%95%99%E7%A8%8B/Snipaste_2021-06-15_20-37-14.png"></p><br><br><br><p>解压后，拷贝主题文件。</p><br><p><img src="/2021/06/15/%E5%A6%82%E4%BD%95%E4%B8%BATypora%E6%8D%A2%E8%82%A4%EF%BC%81-%E6%95%99%E7%A8%8B/Snipaste_2021-06-15_20-40-51.png"></p><p>注意：有的主题有<u>白天与黑夜两种</u>模式，两种都要就两个的对应文件都拷贝。</p><br><br><br><p>例如这个主题。</p><br><p><img src="/2021/06/15/%E5%A6%82%E4%BD%95%E4%B8%BATypora%E6%8D%A2%E8%82%A4%EF%BC%81-%E6%95%99%E7%A8%8B/Snipaste_2021-06-15_20-43-31.png"></p><br><br><br><br><p>打开主题文件夹</p><br><p><img src="/2021/06/15/%E5%A6%82%E4%BD%95%E4%B8%BATypora%E6%8D%A2%E8%82%A4%EF%BC%81-%E6%95%99%E7%A8%8B/Snipaste_2021-06-15_20-20-42.png"></p><br><br><p>把刚刚我们的文件粘进去。</p><br><p><img src="/2021/06/15/%E5%A6%82%E4%BD%95%E4%B8%BATypora%E6%8D%A2%E8%82%A4%EF%BC%81-%E6%95%99%E7%A8%8B/Snipaste_2021-06-15_20-46-42.png"></p><br><p>回到设置，设置自己新加的主题。</p><br><p><img src="/2021/06/15/%E5%A6%82%E4%BD%95%E4%B8%BATypora%E6%8D%A2%E8%82%A4%EF%BC%81-%E6%95%99%E7%A8%8B/Snipaste_2021-06-15_20-45-39.png"></p><br><br><br><br><p> 要有深色主题就一起设置，我这里就只设置浅色。</p><p><img src="/2021/06/15/%E5%A6%82%E4%BD%95%E4%B8%BATypora%E6%8D%A2%E8%82%A4%EF%BC%81-%E6%95%99%E7%A8%8B/Snipaste_2021-06-15_20-46-03.png"></p><br><br><br><p>这样我们就可以用自己喜欢的主题了。</p><br><p><img src="/2021/06/15/%E5%A6%82%E4%BD%95%E4%B8%BATypora%E6%8D%A2%E8%82%A4%EF%BC%81-%E6%95%99%E7%A8%8B/Snipaste_2021-06-15_20-49-45.png"></p><p>是不是更美观了。</p><br>]]></content>
    
    
      
      
    <summary type="html">&lt;br&gt;

&lt;br&gt;

&lt;br&gt;

&lt;h1 id=&quot;如何为Typora换肤！-教程&quot;&gt;&lt;a href=&quot;#如何为Typora换肤！-教程&quot; class=&quot;headerlink&quot; title=&quot;如何为Typora换肤！|教程|&quot;&gt;&lt;/a&gt;如何为Typora换肤！|教程|&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
    <category term="Typora" scheme="http://crosscloudmoon.github.io/tags/Typora/"/>
    
  </entry>
  
  <entry>
    <title>关于实现博客本地实时预览，渲染|hexo框架|</title>
    <link href="http://crosscloudmoon.github.io/2021/06/13/%E5%85%B3%E4%BA%8E%E5%AE%9E%E7%8E%B0%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E5%AE%9E%E6%97%B6%E9%A2%84%E8%A7%88%EF%BC%8C%E6%B8%B2%E6%9F%93hexo%E6%A1%86%E6%9E%B6/"/>
    <id>http://crosscloudmoon.github.io/2021/06/13/%E5%85%B3%E4%BA%8E%E5%AE%9E%E7%8E%B0%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E5%AE%9E%E6%97%B6%E9%A2%84%E8%A7%88%EF%BC%8C%E6%B8%B2%E6%9F%93hexo%E6%A1%86%E6%9E%B6/</id>
    <published>2021-06-13T07:18:58.330Z</published>
    <updated>2021-06-16T07:33:15.882Z</updated>
    
    <content type="html"><![CDATA[ <br><h1 id="关于实现博客本地实时预览，渲染-hexo框架"><a href="#关于实现博客本地实时预览，渲染-hexo框架" class="headerlink" title="关于实现博客本地实时预览，渲染|hexo框架|"></a>关于实现博客本地实时预览，渲染|hexo框架|</h1><br><p>​        相信有不少人受每次修改配置后在<strong>本地预览</strong>都要更新我们的博客，刷新我们的页面的困扰。我也感觉这个很烦，一下修改一套出错了不好找，修一行预览下又太烦。</p><p>​        这时我们的福音来了就是这些<strong>预览插件</strong>。</p><p>​        在自己博客的目录下</p><br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br></pre></td></tr></table></figure><p>​    <br></p><p>​    我在之前的<strong>”踩坑“全集</strong>也有提过这些插件，我们在本地预览时就算不出错，使用这些预览插件也是很好的。</p><p>​        我们hexo s 后修改_config.yml等文件，我们的博客会实时更新。</p><p><img src="/2021/06/13/%E5%85%B3%E4%BA%8E%E5%AE%9E%E7%8E%B0%E5%8D%9A%E5%AE%A2%E6%9C%AC%E5%9C%B0%E5%AE%9E%E6%97%B6%E9%A2%84%E8%A7%88%EF%BC%8C%E6%B8%B2%E6%9F%93hexo%E6%A1%86%E6%9E%B6/Snipaste_2021-06-01_21-25-52.png"></p><p>​    <br>    </p><p>是不是很方便。哈哈，懒人福利了。</p>]]></content>
    
    
      
      
    <summary type="html"> &lt;br&gt;

&lt;h1 id=&quot;关于实现博客本地实时预览，渲染-hexo框架&quot;&gt;&lt;a href=&quot;#关于实现博客本地实时预览，渲染-hexo框架&quot; class=&quot;headerlink&quot; title=&quot;关于实现博客本地实时预览，渲染|hexo框架|&quot;&gt;&lt;/a&gt;关于实现博客本地实时预览</summary>
      
    
    
    
    
    <category term="hexo" scheme="http://crosscloudmoon.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>demo</title>
    <link href="http://crosscloudmoon.github.io/2021/06/04/demo/"/>
    <id>http://crosscloudmoon.github.io/2021/06/04/demo/</id>
    <published>2021-06-04T04:10:43.000Z</published>
    <updated>2021-06-26T07:10:48.428Z</updated>
    
    <content type="html"><![CDATA[<p><video src="http://qu63zmqgg.hb-bkt.clouddn.com/%E8%A2%AB%E6%84%9F%E5%8A%A8%E7%9A%84c.c20191209_144154_Trim.mp4" controls preload="metadata" width="100%" loop></video></p><p><a href="http://qu63zmqgg.hb-bkt.clouddn.com/%E8%A2%AB%E6%84%9F%E5%8A%A8%E7%9A%84c.c20191209_144154_Trim.mp4" download="./video/被感动的c.c20191209_144154_Trim.mp4">downloadvideo</a></p><p><a href="http://qu63zmqgg.hb-bkt.clouddn.com/qu63zmqgg.hb-bkt.clouddn.com/video/%E8%A2%AB%E6%84%9F%E5%8A%A8%E7%9A%84c.c20191209_144154_Trim.mp4">download</a></p><p><a href="../cdn/file/初始化.txt">txt</a></p><p>李厚霖ddfsdf</p><p><br><br><br><br></p><p>asdfd</p><p><a href="https://hexo-blog-source.oss-cn-beijing.aliyuncs.com/media/2BB19A2B9CAE6342E87F5937CB011F70.jpg">下载图片</a></p><p><img src="https://hexo-blog-source.oss-cn-beijing.aliyuncs.com/media/2BB19A2B9CAE6342E87F5937CB011F70.jpg"></p><p><a href="http://qu63zmqgg.hb-bkt.clouddn.com/qu63zmqgg.hb-bkt.clouddn.com/video/%E8%A2%AB%E6%84%9F%E5%8A%A8%E7%9A%84c.c20191209_144154_Trim.mp4">http://qu63zmqgg.hb-bkt.clouddn.com/qu63zmqgg.hb-bkt.clouddn.com…的c.c20191209_144154_Trim.mp4</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;video src=&quot;http://qu63zmqgg.hb-bkt.clouddn.com/%E8%A2%AB%E6%84%9F%E5%8A%A8%E7%9A%84c.c20191209_144154_Trim.mp4&quot; controls preload=&quot;metada</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>hexo框架&quot;踩坑&quot;大合集</title>
    <link href="http://crosscloudmoon.github.io/2021/06/03/hexo%E6%A1%86%E6%9E%B6%E2%80%9D%E8%B8%A9%E5%9D%91%E2%80%9C%E5%A4%A7%E5%90%88%E9%9B%86/"/>
    <id>http://crosscloudmoon.github.io/2021/06/03/hexo%E6%A1%86%E6%9E%B6%E2%80%9D%E8%B8%A9%E5%9D%91%E2%80%9C%E5%A4%A7%E5%90%88%E9%9B%86/</id>
    <published>2021-06-03T02:26:09.754Z</published>
    <updated>2021-06-16T07:33:10.116Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo框架”踩坑“大合集"><a href="#hexo框架”踩坑“大合集" class="headerlink" title="hexo框架”踩坑“大合集"></a>hexo框架”踩坑“大合集</h1><p><br><br><br></p><p>​        这里是我在搭建个人博客到遇到的一些问题，因为是自己也是从网上学习研究的，所以遇到了不少奇奇怪怪的问题，在这里总结一下，可能对你有帮助。</p><p><br><br><br></p><h2 id="一、-ERROR-Deployer-not-found-git"><a href="#一、-ERROR-Deployer-not-found-git" class="headerlink" title="一、 ERROR Deployer not found: git"></a>一、 ERROR Deployer not found: git</h2><p><br>        没有在自己的博客安装git插件的问题。只安装了git工具软件还不够，我们的博客的环境里也一定要有git插件。</p><p>​        我们只要在自己的博客目录下。<br></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><p>就可以。</p><p><br><br><br></p><h2 id="二、-No-such-file-or-directory-和"><a href="#二、-No-such-file-or-directory-和" class="headerlink" title="二、 No such file or directory 和"></a>二、 No such file or directory 和</h2><h2 id="fatal-Could-not-read-from-remote-repository"><a href="#fatal-Could-not-read-from-remote-repository" class="headerlink" title="fatal: Could not read from remote repository"></a>fatal: Could not read from remote repository</h2><br><h4 id="问题原因："><a href="#问题原因：" class="headerlink" title="问题原因："></a>问题原因：</h4><p>出现这错误一般是以下两种原因：</p><ul><li><p>客户端与服务端未生成 ssh key</p></li><li><p>客户端与服务端的ssh key<strong>不匹配</strong></p><br></li></ul><p>​        这两个都是我们的ssh密钥出了问题（当你配置多个密钥或误操作很常见），我们在第一次在配置ssh时也出现了这个，也就是说我们没有可以用的密钥，所以我们解决的方法也很明确了，我们把旧的密钥删除掉，重新配置ssh。C:\Users\你的用户\.ssh下的文件删除（如果你有多个密钥注意只把有问题的密钥删除），如果你没有改名字默认是这几个</p><br><p><img src="/2021/06/03/hexo%E6%A1%86%E6%9E%B6%E2%80%9D%E8%B8%A9%E5%9D%91%E2%80%9C%E5%A4%A7%E5%90%88%E9%9B%86/Snipaste_2021-06-03_09-45-21.png"></p><p>​        我们把前两个删除就可以（只有一个密钥时可以三个都删除，known_hosts在建立 密钥时会自动生成）之后就是</p><br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your_email@youremail.com</span><br></pre></td></tr></table></figure><p>重新建立ssh。 密钥的设置方法详见我的<strong>博文</strong>   <a href="https://crosscloudmoon.github.io/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/">搭建个人博客没有那么难！|详细教程|hexo框架|github|</a>里的关于ssh的内容。</p><p><br><br></p><h2 id="三、extends-includes-layout-pug-block-content-recent-posts-recent-posts-include-includes-recent-posts-pug-include-includes-pagination-pug"><a href="#三、extends-includes-layout-pug-block-content-recent-posts-recent-posts-include-includes-recent-posts-pug-include-includes-pagination-pug" class="headerlink" title="三、extends includes/layout.pug block content #recent-posts.recent-posts include includes/recent-posts.pug include includes/pagination.pug"></a>三、extends includes/layout.pug block content #recent-posts.recent-posts include includes/recent-posts.pug include includes/pagination.pug</h2><br><p>​        在本地预览时浏览器里出现了这个，可能是我们的博客在本地渲染时出了问题，解决方法也很简单，我们安装一些在浏览器里预览的插件。</p><br><p>​        在我们的博客目录下</p><br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br></pre></td></tr></table></figure><p>​    安装后，我们以后修改保存后就可以使用插件实时本地预览，</p><br><p><img src="/2021/06/03/hexo%E6%A1%86%E6%9E%B6%E2%80%9D%E8%B8%A9%E5%9D%91%E2%80%9C%E5%A4%A7%E5%90%88%E9%9B%86/Snipaste_2021-06-01_21-25-52.png"></p><p><br><br><br><br><br></p><h2 id="四、Nunjucks-Error"><a href="#四、Nunjucks-Error" class="headerlink" title="四、Nunjucks Error:"></a>四、Nunjucks Error:</h2><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">为引用问题，大多是我们博文用 &#123;%%&#125;插入图片时的错误，我们只要在&#123;&#125;与%之间加上空格就可以改为&#123; %...% &#125;。</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><br><ol><li><strong>在下载插件或是clone项目时的报错</strong>多半是网络问题，大家也知道github是国外的网址，在国内有时很不稳定，项目下不下来里，推荐大家直接下载压缩包再解压到自己的博客目录。</li><li><strong>本地预览好后上传到远端修改没有生效</strong>。没有报错，一看自己的博客自己的修改就是没有生成，是不是很奇怪，哈哈，不用急，这个太正常了。在hexo d 后我们的更新可能立刻生成，也可能过一段时间生成，可能是几分钟也可能是几天。这个就有点不方便，没办法服务器要一点点处理你的项目。这就是为什么刚开始博客东西少的时候hexo d 后效果马上就生成，后来东西多了，就会变慢 。</li><li><strong>推到远端后更新博客是空白页</strong>。这是可能是你密钥出了问题，本地与远端关联失败就没有可见了。可以重新设置ssh密钥。</li><li><strong>关于本地预览，推到远端报错。</strong>如果不是一些缺少环境/缺少插件什么的fatal致命错误，一些warning警告可以无视。如果hexo s ,hexo d 出现了fatal错误无法正常运行的问题，也可能是网络不稳定（换个网络比如手机热点），或是github网址本身的问题，你可以等一会再试试可能 就不出错了。</li><li>有关博客打开很慢的问题。<ol><li>博客的东西过多</li><li>网络不稳定</li><li>github常有的问题，有时会很慢 </li></ol></li><li> 当有敏感词如一些编程类字符可能造成 hexo g 时的报错，我们可以放在代码块里。</li></ol><p>解决： 优化自己的博客使用懒加载等</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hexo框架”踩坑“大合集&quot;&gt;&lt;a href=&quot;#hexo框架”踩坑“大合集&quot; class=&quot;headerlink&quot; title=&quot;hexo框架”踩坑“大合集&quot;&gt;&lt;/a&gt;hexo框架”踩坑“大合集&lt;/h1&gt;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;​     </summary>
      
    
    
    
    
    <category term="hexo" scheme="http://crosscloudmoon.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>搭建个人博客没有那么难！|详细教程|hexo框架|github|</title>
    <link href="http://crosscloudmoon.github.io/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/"/>
    <id>http://crosscloudmoon.github.io/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/</id>
    <published>2021-06-02T04:02:27.599Z</published>
    <updated>2021-06-16T07:35:24.185Z</updated>
    
    <content type="html"><![CDATA[<br><br><h1 id="搭建个人博客没有那么难！-详细教程-hexo框架-github"><a href="#搭建个人博客没有那么难！-详细教程-hexo框架-github" class="headerlink" title="搭建个人博客没有那么难！|详细教程|hexo框架|github|"></a>搭建个人博客没有那么难！|详细教程|hexo框架|github|</h1><p>​        <br></p><br><p>​        大家一定见过网上一些人的博客，自己一定也多少心里不情想，自己要是也有一个漂亮的博客要多好。我也是这样，所以在自己的博客搭建好后，我第一想的是把自己经验也好，主要是<strong>经历</strong>分享给大家！（因为踩了不好坑）</p><p>​        首先本不打算多説，但我想想还有必要的，告诉一下大家为什么要有自己的博客。对于从事计算机行业的人来説有一个自己的博客十分重要（特别是前端），当我们在投简历的时候，它是我们的排面，一个人的写照，在面试时我们的时间是有限，有时候我们可能不能让面官正确了解到自己，所以如果你要是有一个博客就好了，我们可以把它写在简历里（这在面试时是十分加分的），我们可以在自己博客里写自己的技术向博文也好，甚至是学习笔记也可以，重要的是让别人可以了解到你！</p><p>​        如果你不和计算机行业相关，有一个自己博客也不失为一件<strong>炫酷</strong>的事。废话到这，下面是具体的教程。（本人用是<strong>hexo框架</strong>，我也推荐大家使用，因为用它的人多，有什么问题也很好从网上查到）</p><br><br><br><h2 id="我们要做几件事"><a href="#我们要做几件事" class="headerlink" title="我们要做几件事"></a>我们要做几件事</h2><ol><li>下载搭建博客必要的软件。</li><li>在自己的电脑上建立<strong>本地博客</strong>。</li><li>把个人博客部署到<strong>远端服务器</strong>。</li></ol><br><br><br><br><h2 id="一、-前期准备工作（下载工具等）"><a href="#一、-前期准备工作（下载工具等）" class="headerlink" title="一、 前期准备工作（下载工具等）"></a>一、 前期准备工作（下载工具等）</h2><br><ol><li>下载node.js</li><li>下载git</li><li>有一个github帐号</li></ol><br><br><br><h3 id="下载node-js"><a href="#下载node-js" class="headerlink" title="下载node.js"></a>下载node.js</h3><br><p>​        直接从官网下载就可以。<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p><p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_09-25-16.png"></p><p>​        安装十分简单，我们采取<strong>傻瓜式安装</strong> ，一直下一步。</p><p>​        安装好后，我们也可以用node -命令来查看自己是否安装成功。</p><p>我们打开cmd(win+r 输入cmd回车)查看。(我的电脑用的是windows,苹果和用Linux的小伙伴的代码和我的略有不同，可以自己查下)之后的代码也是在cmd里操作的。</p><p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_09-34-57.png"></p><br><br><h3 id="下载git工具"><a href="#下载git工具" class="headerlink" title="下载git工具"></a>下载git工具</h3><br><p>同样我们也是在官网下载，<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p><p>直接下一步式安装 。</p><p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_16-12-47.png"></p><p>很简单，这里就不多赘述了，安装好后右击就多了git的几个选项。</p><p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_16-26-40.png"></p><br><br><br><h3 id="注册github帐号"><a href="#注册github帐号" class="headerlink" title="注册github帐号"></a>注册github帐号</h3><br><p>​        官网：<a href="https://github.com/">https://github.com/</a></p><p>注册帐号大家一定也是很常做了，我就不多説了，github有时很慢 ，注册时注意一下。</p><p>有算是有纯开然小白，上网查一下也就可以搞定的。</p><br><br><h2 id="二、本地部署博客"><a href="#二、本地部署博客" class="headerlink" title="二、本地部署博客"></a>二、本地部署博客</h2><br><p>首先我们使用<strong>npm</strong>（包管理工具）来安装淘宝的镜像源，我们还是在cmd里输入</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.toobao.org</span><br></pre></td></tr></table></figure><br><p>下载可能有点慢 ，不用急，你没卡！</p><p>同样你可以用<strong>cnpm -v</strong>(只要出现版本号就是成功了)检查下载是否成功。</p><p>现在我们就可以来安装hexo框架</p> <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><p> hexo -v检查</p><br><p>​        现在可以本地搭建了，我们在自己的电脑根目录（如果你有多个 硬盘不固定是那个盘）下建立blog文件夹（位置，名字不是固定，也不建议改），我们之后的一切操作将在blog文件夹下进行。</p><p>​        这里我在c盘下建立</p><p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_09-58-33.png"></p><br><br><h4 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a><strong>初始化博客</strong></h4><br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>当出现start blogging with Hexo!我们就是初始化成功了、。</p><p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_10-01-00.png"></p><br><p>我们的初始blog里有这些文件。</p><p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_11-10-22.png"></p><br><br><p>可能 有些小伙伴不太清楚我们的<strong>部署命令</strong>，我在这简单説下 ,这下面的几行命令是我们在使用博客会常常用到的</p><ol><li> hexo  clean         // 用来<strong>清理博客</strong>（用在生成前）</li><li>hexo  g                //  用来生成博客（我们配置了本地文件后，例如改了配置，修改了主题什么的，我们必须要生成一下，才可以用 hexo s 预览）</li><li> hexo s           // 用于<strong>本地预览博客</strong>（在推到远端前的预览，每次都到远端看结果会很不方便）</li><li> hexo d        // 把我们本地调试好的博客<strong>部署到服务器</strong>（这就是正式上线了）</li></ol><br><br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_10-06-01.png"></p><br><p>我们可以用本地的4000端口访问博客。（在浏览器里输入<a href="http://localhost:4000/">http://localhost:4000</a>）</p><p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_10-09-09.png"></p><br>        <p>打开后是不是很激动我们的博客有界面了！！！哈哈，后面还有很多工作，但有了一个界面还有很高兴的。这就是我们的初始界面，还没有主题，有了主题后会很漂亮的。</p><p> 好，我们ctrl+c断开我们的博客，开始后来的。</p><p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_10-13-09.png"></p><br><br><br><br><h2 id="三、把本地博客部署到远端"><a href="#三、把本地博客部署到远端" class="headerlink" title="三、把本地博客部署到远端"></a>三、把本地博客部署到远端</h2><p>​        我们借用github的服务器，把博客搭建在github上。</p><p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_10-23-38.png"></p><p>登入自己刚刚建立的帐号。这里我就用我自己的帐号作为例子，就不新建立 了。</p><p>新建一个仓库作为搭建博客的容器</p><p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_10-24-32.png"></p><br><br><p>** 仓库的名字<strong>一定要是自己github名字</strong>（xxxx.github.io），我们要通过这个名字访问我们的网址。我这里是crosscloudmoon.github.io</p><p>我用demo这个名字给大家演示。</p><p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_10-30-16.png"></p><br><br><p>建立 好后是这个样子的，仓库里还没有东西是一个空仓库</p><p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_10-39-19.png"></p><p>我们生成了一个网址一会要用到，仓库先放着，我们来进行之后的步骤。</p><p>github是基于git的网站，所以我们要使用git来使用github。</p><p>我们来安装下git的插件，回到cmd</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><p>可能 有一些<strong>warn 警告</strong>不用在意，不影响我们的操作。</p><p>我们dir看一下</p><p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_10-48-26.png"></p><br><br><p>我们打开**_config.yml**，你电脑上装了vim之类的编辑工具可以用，我这里用vscode打开。</p><br><p>我们需要配置config文件，在文档末写入以下命令。</p><p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_10-57-09.png"></p><br><p>** type,repo,branch关键字一定要有一个空格，要用单引号’’把内容包起来。</p><p>保存后，关闭。</p><br><br><br><br><h3 id="配置ssh密钥"><a href="#配置ssh密钥" class="headerlink" title="配置ssh密钥"></a>配置ssh密钥</h3><br><p>​        这个是我们使用git与<strong>github仓库</strong>关联的重要工序。不配置ssh我们的就没法与我们的远程服务器关联。</p><h4 id="生成ssh-key"><a href="#生成ssh-key" class="headerlink" title="生成ssh key"></a>生成ssh key</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮件地址@youremail.com&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>你会看见这几行字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;邮件地址@youremail.com&quot; // 你注册github的邮箱， 注意是大写C。</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):  // 这里是让设置你的路径我们直接回车，默认就好</span><br></pre></td></tr></table></figure><p><br><br></p><br><p>系统会让你输入密码，我这<strong>推荐为空</strong>，因为每次上传到远端它都会让你转入密码，会有点不方便，当然你也可以设置。我这里就不设了，直接回车。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase):&lt;设置密码&gt;</span><br><span class="line">Enter same passphrase again:&lt;再次输入密码&gt;</span><br></pre></td></tr></table></figure><br><p>出现了这个 ，你的密钥就建立成功了</p><p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_16-43-07.png"></p><br><br><br><h4 id="关联SSH-key到github"><a href="#关联SSH-key到github" class="headerlink" title="关联SSH key到github"></a>关联SSH key到github</h4><br><p>在本地找到id_rsa.pub文件，C:\Users\你的用户\.ssh下</p><p>打开文件把内容全部复制</p><p>到github的设置</p><p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_16-50-15.png"></p><p>找到ssh</p><p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_16-50-49.png"></p><br><br><p>建立一个key</p><p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_16-51-25.png"></p><br><p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_16-52-42.png"></p><br><p><br><br></p><br><h4 id="设置用户信息"><a href="#设置用户信息" class="headerlink" title="设置用户信息"></a>设置用户信息</h4><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;...&quot;//输入注册时的username</span><br><span class="line">git config --global user.email  &quot;...@xxx.com&quot;//填写注册邮箱</span><br></pre></td></tr></table></figure><br><br><p><strong>SSH Key配置完成了</strong></p><p>我们用<strong>hexo d</strong> 把博客推到远端。</p><p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_11-05-00.png"></p><p>因为我不是第一次使用，直接就上传了，如果你是第一次上传，它会让输入用户，密码（就是我们建立github帐号用户密码）。</p><p>我们回到<strong>github刷新</strong>一下，发现我们的仓库多了东西，有了许多文件。</p><p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_11-11-51.png"></p><br><p>就是我们的本地文件。现在就可以在网上访问我们的网页了。</p><p>在浏览器中输入我们的网址。我这里是<a href="https://crosscloudmoon.github.io/">https://crosscloudmoon.github.io/</a></p><p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_11-17-42.png"></p><p>打开后是可以在网上访问的，我的界面可能和你的不太一样，因为我换了主题，hexo默认的主题为<strong>landscape</strong>，我的是butterfly。这是主题也是很 漂亮 的，我也很喜欢。</p><br><br><br><h2 id="下面我教大家如何更换主题。"><a href="#下面我教大家如何更换主题。" class="headerlink" title="下面我教大家如何更换主题。"></a>下面我教大家如何更换主题。</h2><br><p>​        换主题其实就是把github上的开源项目clone到我们自己的项目上。</p><p>​        <a href="https://github.com/jerryc127/hexo-theme-butterfly/tree/dev">https://github.com/jerryc127/hexo-theme-butterfly/tree/dev</a></p><p>这个是<strong>butterfly主题</strong>的开源地址，我使用的这个主题，大家也可以自己到网上找开源项目来下载。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/jerryc127/hexo-theme-butterfly/<span class="built_in">tree</span>/dev.git themes/butterfly</span><br></pre></td></tr></table></figure><br><br><p>** clone如果很慢 ，甚至出错的可以直接下载压缩包后解压到自己的blog目录。</p><p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_15-49-10.png"></p><p>出现了这个明显的字样，你就下载成功了。</p><p>现在要修改config文件为butterfly主题，打开刚刚配置过的_config.yml</p><p><img src="/2021/06/02/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E9%9A%BE%EF%BC%81%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8Bhexo%E6%A1%86%E6%9E%B6github/Snipaste_2021-06-02_15-53-12.png"></p><br><br><br><p>我们清理下</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>之后我们生成一下</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>本地预览一下</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><br><p>好，大功告成，这样我们的博客就正式上线，还有了主题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;br&gt;

&lt;br&gt;

&lt;h1 id=&quot;搭建个人博客没有那么难！-详细教程-hexo框架-github&quot;&gt;&lt;a href=&quot;#搭建个人博客没有那么难！-详细教程-hexo框架-github&quot; class=&quot;headerlink&quot; title=&quot;搭建个人博客没有那么难！|详细教程|</summary>
      
    
    
    
    
    <category term="hexo" scheme="http://crosscloudmoon.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
